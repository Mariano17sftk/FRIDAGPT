Skip to main contentBusy Beavers!Jim FisherGuide9 chapters37K learnersComing soon1. Uncomputable functionsComing soon2. Interpreters and universality3. The halting problemOr, Turing’s trick to troll any termination test0/244. Proofs about programs0/335. Gödel’s first incompleteness theorem0/26Coming soon6. Godel’s second incompleteness theorem7. Rice’s theorem0/31Coming soon8. Just how busy can a busy beaver be?Coming soon9. Quines and fixed pointsAn easy computation: I want this course.$19. Yours forever. 30-day money-back guarantee.Restart chapterShare chapter0/24The halting problemAn interactive tutorialWhat is ‘halting’?The halts functionImplementing haltsParadoxical self-referenceThe haltsOn functionSelf-reflecting functions 🪞Turing’s troll function 👺Trolling the troll 👺🪞If the troll halts on its own code ...If the troll does not halt on its own code ...Equivalence of halts and haltsOnCan we patch the bug? 🐛ConclusionSign in (Google/email)AccountWriter’s cornerSend feedbackBy using this site, you agree to our privacy policy.The halting problemAn interactive tutorialPerhaps your code editor has warned you before: “Unreachable code detected!” But how does it know? And will it warn you about all lines that are unreachable? Back in 1936, before computers really existed, Alan Turing was already thinking about this problem. In this chapter, you’ll learn the most important result in computability theory: Turing’s trick to troll any termination test!Okay, no more halting, let’s go!What is ‘halting’?In this lesson, we’ll write programs in JavaScript. Here are three programs. Which one never halts, i.e. never prints "done"?// Program Aconsole.log('done');// Program Blet s = 'hi';for (let i = 0; i < s.length; i++) {  s = s + '!';}console.log('done');// Program Clet s = 'hi';while (s !== '') { s = ''; }console.log('done');Program AProgram BProgram CSo the last line of Program B will never be reached. But if you paste Program B into your code editor, you won’t get a warning saying “Unreachable code detected!” A while ago someone offered $1000 for a developer to fix this bug once and for all. What do you think — would you take the contract?Yes!No!The halts functionFor your code editor to detect all unreachable code, it would need a function called halts that takes some code as input, and returns true or false to say whether it finishes running. More precisely, we want a JavaScript function like this:function halts (code: string) {  // Would the string `code` halt  // when evaluated as JavaScript?  // Insert clever analysis here!  return wouldHalt;}Let’s write a test for halts. What should the following do?halts(`  let i = 1;  while (i !== 10) i += 2;  console.log(i);`)halts should return truehalts should return falsehalts should loop foreverImplementing haltsHow would you implement halts(code)? You could first try to parse the code as JavaScript: if it’s not valid JavaScript, you can return true (it would immediately crash). Then if the program has no loops or recursion, you should return ... truefalseAnd if the program starts with while(true){}, you should return ...truefalseYou could even run the program for a while with eval, and if it halts, then you can return true. But is it enough to just do all the checks we can think of? What we really need is a single, unified way to check whether any program halts.ContinueParadoxical self-referenceAlan Turing was thinking about this back in 1936, and came up with the surprising answer: whatever version of halts you write, it will always have a bug!Here’s a strange starting point: consider the sentence “this sentence is false”. Is that sentence true or false?It’s true!It’s false!It’s neither!It’s weird, isn’t it? This sentence is confusing because it’s able to refer to itself. There are many other paradoxes like this. The insight underlying Turing’s proof, and many other many interesting theorems, is that self-reference often leads to weird paradoxes.There are hints of self-reference in the description of halts: it’s a program that reasons about programs. So Turing starts thinking ... what would halts say if we asked it whether halts halts?ContinueThe haltsOn functionHowever, we can’t just ask whether halts halts. It’s a function, so we must ask whether it halts on a particular input. So we need to change the problem a bit: rather than seeking a function halts(code), we’re going to seek a function haltsOn(funcStr, argStr). It should tell us whether the function would halt when given a specific argument.Let’s write some tests for haltsOn. Here’s one:const isSmallNum = `function (n) {  return n < 3;}`;haltsOn(isSmallNum, '2')Wait, why is '2' a string?I’m glad you asked! It’s for the same reason that code and funcStr are strings: we’re giving haltsOn raw source code access, so we pass it the JavaScript string representation of the argument.Anyway, I’ll give you this one for free: haltsOn should return true, because the following program will halt:const f = function (n) {  return n < 3;};f(2);Now it’s your turn: what should the following program do?const funcStr = `function (s) {  while (s === "foo") { }}`;haltsOn(funcStr, '"foo"')Should return trueShould return falseShould loop foreverSelf-reflecting functions 🪞Anyway, Turing was thinking about functions that can look at their own source code. Here’s an innocent function that, given a string, extracts the first number in it:function firstNumberIn(str: string) {  return /d+/.exec(str)[0];}For example, firstNumberIn("testing 1 2 3") would return "1". But what would firstNumberIn return when given its own source code?10"0"It would not haltSimilarly, we can ask whether functions will halt when given their own source code. Try this one out:function (s) {  if (s.includes("froot")) {    while (true);  }}What does this function do when given its own source code?It haltsIt loops forever(You could actually replace "froot" with any other string, and it would still loop when given its own source code. That should be a hint that things are getting weird.)But we don’t have to analyze this ourselves: we can just ask haltsOn! Here’s how:function haltsOnSelf(funcStr: string) {  return haltsOn(    funcStr,    JSON.stringify(funcStr)  );}(Notice the JSON.stringify. Without this, we would not be passing the source code to the function; we would be passing a literal function as the argument.)Here’s an example:haltsOnSelf(`function (s) {  while (s.length > 1000) { }}`)What should the above return?Should return trueShould return falseTuring’s troll function 👺This is getting very loopy, isn’t it? Stay strapped in, because there’s one more level of loopiness to come! Turing now defines a devilish function, troll, which looks like this:function troll(funcStr: string) {  if (haltsOnSelf(funcStr)) {    while (true) { }  }}Turing’s troll function looks bizarre! Given a funcStr, it either halts or loops forever. To decide, the troll asks haltsOnSelf what the function would do when given its own source code, and then the troll does the opposite! That is, if funcStr would halt on its own source code, then troll does not halt; but if funcStr would not halt on its own source code, then troll halts.Let’s work through some examples. What will the following do?troll(`function (s) {  return true;}`)troll will halttroll will loop foreverLet’s try another one. What would the following do?troll(`function (s) {  while (true) { }}`)troll will halttroll will loop foreverTrolling the troll 👺🪞Now, the function troll, like any other JavaScript value, can be encoded as a string:const trollStr = `function (funcStr) {  if (haltsOnSelf(funcStr)) {    while (true) { }  }}`;Now comes Turing’s truly crazy thought: what happens when we call troll on its own source code? That is, what happens if we run troll(trollStr)? Luckily, we can answer that: just run haltsOnSelf(trollStr)!Now, haltsOnSelf(trollStr) is either true or false. And it turns out that, in either case, we get a strange contradiction ...If the troll halts on its own code ...Let’s first assume haltsOnSelf(trollStr) returns true. Then what is halts claiming that troll(trollStr) will do?It claims troll(trollStr) would haltIt claims troll(trollStr) would loop foreverNow read the definition of troll: what would troll(trollStr) actually do?troll(trollStr) would halttroll(trollStr) would loop foreverSo if haltsOnSelf(trollStr) returns true, it would be wrong!If the troll does not halt on its own code ...Not so bad perhaps: surely haltsOnSelf(trollStr) must return false, then?Let’s try it. Now assume haltsOnSelf(trollStr) returns false. Then halts is claiming that troll(trollStr) will not halt.But now read the definition of troll: if haltsOnSelf(trollStr) returns false, what would troll(trollStr) actually do?troll(trollStr) would halttroll(trollStr) would loop foreverAgain, haltsOnSelf is wrong: it claimed that  troll(trollStr) would not halt, but upon inspection, it clearly would halt! Whatever haltsOnSelf claims troll will do, troll maliciously does the opposite!So, our haltsOnSelf has a bug: it gives the wrong answer for the input trollStr. But where is the bug, exactly? Turing’s says: the bug is in the haltsOn function that we assumed the existence of.Whatever version of haltsOn we’re given, we can show that it has a bug. That is, there is no function that correctly solves the halting problem!Wait, what about halts, not haltsOn?Equivalence of halts and haltsOnWe originally asked for a function halts, rather than haltsOn. But it turns out that they’re equivalent. If we assume that we have a correct halts, then we can write a correct haltsOn like so:function haltsOn(funcStr, argStr) {  return halts(`    const f = ${funcStr};    f(${argStr});  `);}This shows that halts is not possible either, because it would lead to a correct haltsOn, which we just saw is not possible.But note that you could actually define them the other way around! Here’s an exercise: assuming you have haltsOn, write an implementation of halts.Okay, I did it!Nah, just show me.function halts(code: string) {  return haltsOn(    // Ignore argument, just run code    `function(_) { ${code} }`,    // Can be anything - it's ignored!    '0'  );}So, halts and haltsOn have equivalent power. For this reason, you’ll often see authors casually jump between one and the other.ContinueCan we patch the bug? 🐛You might be wondering: can’t we just fix patch the bug in haltsOn? Let’s try defining a haltsOn_v2 that just patches over this bug:function haltsOn_v2(funcStr, argStr) {  if (funcStr === trollStr &&      argStr === JSON.stringify(trollStr)) {    // Patch over the bug!    return !haltsOn(funcStr, argStr);  }  // Otherwise it's probably right?  return haltsOn(funcStr, argStr);}Does haltsOn_v2 have a bug?Yes, haltsOn_v2 can give wrong answersNo, haltsOn_v2 is bug freeConclusionThe point is: whatever implementation of halts you provide, we can write a version of troll that proves it has a bug!Halt chapter ✋End notes:Turing’s troll function is usually called g. Thanks to an anonymous reviewer for suggesting the name “troll”!Next in Busy Beavers!:4. Proofs about programsHang on, didn’t we just prove computers can’t decide whether programs halt? Not so fast! In this chapter, we’ll use Lean, a programming language and proof assistant, to prove whether some specific programs halt. Suck it, Turing!0/33Quoted text: Send feedback 📩Your feedback will be sent privately to the author. They may reply to you by email. Thanks for helping make this course better!The halting problem | Busy Beavers!window.dataLayer = window.dataLayer || [];        function gtag(){dataLayer.push(arguments);}        gtag('js', new Date());        gtag('config', 'G-J286F3WJVC');.qJTHM{-webkit-user-select:none;color:#202124;direction:ltr;-webkit-touch-callout:none;font-family:"Roboto-Regular",arial,sans-serif;-webkit-font-smoothing:antialiased;font-weight:400;margin:0;overflow:hidden;-webkit-text-size-adjust:100%}.ynRLnc{left:-9999px;position:absolute;top:-9999px}.L6cTce{display:none}.bltWBb{word-break:break-all}.hSRGPd{color:#1a73e8;cursor:pointer;font-weight:500;text-decoration:none}.Bz112c-W3lGp{height:16px;width:16px}.Bz112c-E3DyYd{height:20px;width:20px}.Bz112c-r9oPif{height:24px;width:24px}.Bz112c-uaxL4e{-webkit-border-radius:10px;border-radius:10px}.LgbsSe-Bz112c{display:block}.S9gUrf-YoZ4jf,.S9gUrf-YoZ4jf *{border:none;margin:0;padding:0}.fFW7wc-ibnC6b>.aZ2wEe>div{border-color:#4285f4}.P1ekSe-ZMv3u>div:nth-child(1){background-color:#1a73e8!important}.P1ekSe-ZMv3u>div:nth-child(2),.P1ekSe-ZMv3u>div:nth-child(3){background-image:linear-gradient(to right,rgba(255,255,255,.7),rgba(255,255,255,.7)),linear-gradient(to right,#1a73e8,#1a73e8)!important}.haAclf{display:inline-block}.nsm7Bb-HzV7m-LgbsSe{-webkit-border-radius:4px;border-radius:4px;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-transition:background-color .218s,border-color .218s;transition:background-color .218s,border-color .218s;-webkit-user-select:none;-webkit-appearance:none;background-color:#fff;background-image:none;border:1px solid #dadce0;color:#3c4043;cursor:pointer;font-family:"Google Sans",arial,sans-serif;font-size:14px;height:40px;letter-spacing:0.25px;outline:none;overflow:hidden;padding:0 12px;position:relative;text-align:center;vertical-align:middle;white-space:nowrap;width:auto}@media screen and (-ms-high-contrast:active){.nsm7Bb-HzV7m-LgbsSe{border:2px solid windowText;color:windowText}}.nsm7Bb-HzV7m-LgbsSe.pSzOP-SxQuSe{font-size:14px;height:32px;letter-spacing:0.25px;padding:0 10px}.nsm7Bb-HzV7m-LgbsSe.purZT-SxQuSe{font-size:11px;height:20px;letter-spacing:0.3px;padding:0 8px}.nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe{padding:0;width:40px}.nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe.pSzOP-SxQuSe{width:32px}.nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe.purZT-SxQuSe{width:20px}.nsm7Bb-HzV7m-LgbsSe.JGcpL-RbRzK{-webkit-border-radius:20px;border-radius:20px}.nsm7Bb-HzV7m-LgbsSe.JGcpL-RbRzK.pSzOP-SxQuSe{-webkit-border-radius:16px;border-radius:16px}.nsm7Bb-HzV7m-LgbsSe.JGcpL-RbRzK.purZT-SxQuSe{-webkit-border-radius:10px;border-radius:10px}.nsm7Bb-HzV7m-LgbsSe.MFS4be-Ia7Qfc{border:none;color:#fff}.nsm7Bb-HzV7m-LgbsSe.MFS4be-v3pZbf-Ia7Qfc{background-color:#1a73e8}.nsm7Bb-HzV7m-LgbsSe.MFS4be-JaPV2b-Ia7Qfc{background-color:#202124;color:#e8eaed}.nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c{height:18px;margin-right:8px;min-width:18px;width:18px}.nsm7Bb-HzV7m-LgbsSe.pSzOP-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c{height:14px;min-width:14px;width:14px}.nsm7Bb-HzV7m-LgbsSe.purZT-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c{height:10px;min-width:10px;width:10px}.nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-Bz112c{margin-left:8px;margin-right:-4px}.nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c{margin:0;padding:10px}.nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe.pSzOP-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c{padding:8px}.nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe.purZT-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c{padding:4px}.nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{-webkit-border-top-left-radius:3px;border-top-left-radius:3px;-webkit-border-bottom-left-radius:3px;border-bottom-left-radius:3px;display:-webkit-box;display:-webkit-flex;display:flex;justify-content:center;-webkit-align-items:center;align-items:center;background-color:#fff;height:36px;margin-left:-10px;margin-right:12px;min-width:36px;width:36px}.nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf .nsm7Bb-HzV7m-LgbsSe-Bz112c,.nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf .nsm7Bb-HzV7m-LgbsSe-Bz112c{margin:0;padding:0}.nsm7Bb-HzV7m-LgbsSe.pSzOP-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{height:28px;margin-left:-8px;margin-right:10px;min-width:28px;width:28px}.nsm7Bb-HzV7m-LgbsSe.purZT-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{height:16px;margin-left:-6px;margin-right:8px;min-width:16px;width:16px}.nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{-webkit-border-radius:3px;border-radius:3px;margin-left:2px;margin-right:0;padding:0}.nsm7Bb-HzV7m-LgbsSe.JGcpL-RbRzK .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{-webkit-border-radius:18px;border-radius:18px}.nsm7Bb-HzV7m-LgbsSe.pSzOP-SxQuSe.JGcpL-RbRzK .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{-webkit-border-radius:14px;border-radius:14px}.nsm7Bb-HzV7m-LgbsSe.purZT-SxQuSe.JGcpL-RbRzK .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{-webkit-border-radius:8px;border-radius:8px}.nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-bN97Pc-sM5MNb{display:-webkit-box;display:-webkit-flex;display:flex;-webkit-align-items:center;align-items:center;-webkit-flex-direction:row;flex-direction:row;justify-content:space-between;-webkit-flex-wrap:nowrap;flex-wrap:nowrap;height:100%;position:relative;width:100%}.nsm7Bb-HzV7m-LgbsSe .oXtfBe-l4eHX{justify-content:center}.nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-BPrWId{-webkit-flex-grow:1;flex-grow:1;font-family:"Google Sans",arial,sans-serif;font-weight:500;overflow:hidden;text-overflow:ellipsis;vertical-align:top}.nsm7Bb-HzV7m-LgbsSe.purZT-SxQuSe .nsm7Bb-HzV7m-LgbsSe-BPrWId{font-weight:300}.nsm7Bb-HzV7m-LgbsSe .oXtfBe-l4eHX .nsm7Bb-HzV7m-LgbsSe-BPrWId{-webkit-flex-grow:0;flex-grow:0}.nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-MJoBVe{-webkit-transition:background-color .218s;transition:background-color .218s;bottom:0;left:0;position:absolute;right:0;top:0}.nsm7Bb-HzV7m-LgbsSe:hover,.nsm7Bb-HzV7m-LgbsSe:focus{-webkit-box-shadow:none;box-shadow:none;border-color:#d2e3fc;outline:none}.nsm7Bb-HzV7m-LgbsSe:hover .nsm7Bb-HzV7m-LgbsSe-MJoBVe,.nsm7Bb-HzV7m-LgbsSe:focus .nsm7Bb-HzV7m-LgbsSe-MJoBVe{background:rgba(66,133,244,.04)}.nsm7Bb-HzV7m-LgbsSe:active .nsm7Bb-HzV7m-LgbsSe-MJoBVe{background:rgba(66,133,244,.1)}.nsm7Bb-HzV7m-LgbsSe.MFS4be-Ia7Qfc:hover .nsm7Bb-HzV7m-LgbsSe-MJoBVe,.nsm7Bb-HzV7m-LgbsSe.MFS4be-Ia7Qfc:focus .nsm7Bb-HzV7m-LgbsSe-MJoBVe{background:rgba(255,255,255,.24)}.nsm7Bb-HzV7m-LgbsSe.MFS4be-Ia7Qfc:active .nsm7Bb-HzV7m-LgbsSe-MJoBVe{background:rgba(255,255,255,.32)}.nsm7Bb-HzV7m-LgbsSe .n1UuX-DkfjY{-webkit-border-radius:50%;border-radius:50%;display:-webkit-box;display:-webkit-flex;display:flex;height:20px;margin-left:-4px;margin-right:8px;min-width:20px;width:20px}.nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-BPrWId{font-family:"Roboto";font-size:12px;text-align:left}.nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-BPrWId .ssJRIf,.nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-BPrWId .K4efff .fmcmS{overflow:hidden;text-overflow:ellipsis}.nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-BPrWId .K4efff{display:-webkit-box;display:-webkit-flex;display:flex;-webkit-align-items:center;align-items:center;color:#5f6368;fill:#5f6368;font-size:11px;font-weight:400}.nsm7Bb-HzV7m-LgbsSe.jVeSEe.MFS4be-Ia7Qfc .nsm7Bb-HzV7m-LgbsSe-BPrWId .K4efff{color:#e8eaed;fill:#e8eaed}.nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-BPrWId .K4efff .Bz112c{height:18px;margin:-3px -3px -3px 2px;min-width:18px;width:18px}.nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{-webkit-border-top-left-radius:0;border-top-left-radius:0;-webkit-border-bottom-left-radius:0;border-bottom-left-radius:0;-webkit-border-top-right-radius:3px;border-top-right-radius:3px;-webkit-border-bottom-right-radius:3px;border-bottom-right-radius:3px;margin-left:12px;margin-right:-10px}.nsm7Bb-HzV7m-LgbsSe.jVeSEe.JGcpL-RbRzK .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{-webkit-border-radius:18px;border-radius:18px}.L5Fo6c-sM5MNb{border:0;display:block;left:0;position:relative;top:0}.L5Fo6c-bF1uUb{-webkit-border-radius:4px;border-radius:4px;bottom:0;cursor:pointer;left:0;position:absolute;right:0;top:0}.L5Fo6c-bF1uUb:focus{border:none;outline:none}sentinel{}The halting problem | Busy Beavers!window.dataLayer = window.dataLayer || [];        function gtag(){dataLayer.push(arguments);}        gtag('js', new Date());        gtag('config', 'G-J286F3WJVC');.qJTHM{-webkit-user-select:none;color:#202124;direction:ltr;-webkit-touch-callout:none;font-family:"Roboto-Regular",arial,sans-serif;-webkit-font-smoothing:antialiased;font-weight:400;margin:0;overflow:hidden;-webkit-text-size-adjust:100%}.ynRLnc{left:-9999px;position:absolute;top:-9999px}.L6cTce{display:none}.bltWBb{word-break:break-all}.hSRGPd{color:#1a73e8;cursor:pointer;font-weight:500;text-decoration:none}.Bz112c-W3lGp{height:16px;width:16px}.Bz112c-E3DyYd{height:20px;width:20px}.Bz112c-r9oPif{height:24px;width:24px}.Bz112c-uaxL4e{-webkit-border-radius:10px;border-radius:10px}.LgbsSe-Bz112c{display:block}.S9gUrf-YoZ4jf,.S9gUrf-YoZ4jf *{border:none;margin:0;padding:0}.fFW7wc-ibnC6b>.aZ2wEe>div{border-color:#4285f4}.P1ekSe-ZMv3u>div:nth-child(1){background-color:#1a73e8!important}.P1ekSe-ZMv3u>div:nth-child(2),.P1ekSe-ZMv3u>div:nth-child(3){background-image:linear-gradient(to right,rgba(255,255,255,.7),rgba(255,255,255,.7)),linear-gradient(to right,#1a73e8,#1a73e8)!important}.haAclf{display:inline-block}.nsm7Bb-HzV7m-LgbsSe{-webkit-border-radius:4px;border-radius:4px;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-transition:background-color .218s,border-color .218s;transition:background-color .218s,border-color .218s;-webkit-user-select:none;-webkit-appearance:none;background-color:#fff;background-image:none;border:1px solid #dadce0;color:#3c4043;cursor:pointer;font-family:"Google Sans",arial,sans-serif;font-size:14px;height:40px;letter-spacing:0.25px;outline:none;overflow:hidden;padding:0 12px;position:relative;text-align:center;vertical-align:middle;white-space:nowrap;width:auto}@media screen and (-ms-high-contrast:active){.nsm7Bb-HzV7m-LgbsSe{border:2px solid windowText;color:windowText}}.nsm7Bb-HzV7m-LgbsSe.pSzOP-SxQuSe{font-size:14px;height:32px;letter-spacing:0.25px;padding:0 10px}.nsm7Bb-HzV7m-LgbsSe.purZT-SxQuSe{font-size:11px;height:20px;letter-spacing:0.3px;padding:0 8px}.nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe{padding:0;width:40px}.nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe.pSzOP-SxQuSe{width:32px}.nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe.purZT-SxQuSe{width:20px}.nsm7Bb-HzV7m-LgbsSe.JGcpL-RbRzK{-webkit-border-radius:20px;border-radius:20px}.nsm7Bb-HzV7m-LgbsSe.JGcpL-RbRzK.pSzOP-SxQuSe{-webkit-border-radius:16px;border-radius:16px}.nsm7Bb-HzV7m-LgbsSe.JGcpL-RbRzK.purZT-SxQuSe{-webkit-border-radius:10px;border-radius:10px}.nsm7Bb-HzV7m-LgbsSe.MFS4be-Ia7Qfc{border:none;color:#fff}.nsm7Bb-HzV7m-LgbsSe.MFS4be-v3pZbf-Ia7Qfc{background-color:#1a73e8}.nsm7Bb-HzV7m-LgbsSe.MFS4be-JaPV2b-Ia7Qfc{background-color:#202124;color:#e8eaed}.nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c{height:18px;margin-right:8px;min-width:18px;width:18px}.nsm7Bb-HzV7m-LgbsSe.pSzOP-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c{height:14px;min-width:14px;width:14px}.nsm7Bb-HzV7m-LgbsSe.purZT-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c{height:10px;min-width:10px;width:10px}.nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-Bz112c{margin-left:8px;margin-right:-4px}.nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c{margin:0;padding:10px}.nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe.pSzOP-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c{padding:8px}.nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe.purZT-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c{padding:4px}.nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{-webkit-border-top-left-radius:3px;border-top-left-radius:3px;-webkit-border-bottom-left-radius:3px;border-bottom-left-radius:3px;display:-webkit-box;display:-webkit-flex;display:flex;justify-content:center;-webkit-align-items:center;align-items:center;background-color:#fff;height:36px;margin-left:-10px;margin-right:12px;min-width:36px;width:36px}.nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf .nsm7Bb-HzV7m-LgbsSe-Bz112c,.nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf .nsm7Bb-HzV7m-LgbsSe-Bz112c{margin:0;padding:0}.nsm7Bb-HzV7m-LgbsSe.pSzOP-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{height:28px;margin-left:-8px;margin-right:10px;min-width:28px;width:28px}.nsm7Bb-HzV7m-LgbsSe.purZT-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{height:16px;margin-left:-6px;margin-right:8px;min-width:16px;width:16px}.nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{-webkit-border-radius:3px;border-radius:3px;margin-left:2px;margin-right:0;padding:0}.nsm7Bb-HzV7m-LgbsSe.JGcpL-RbRzK .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{-webkit-border-radius:18px;border-radius:18px}.nsm7Bb-HzV7m-LgbsSe.pSzOP-SxQuSe.JGcpL-RbRzK .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{-webkit-border-radius:14px;border-radius:14px}.nsm7Bb-HzV7m-LgbsSe.purZT-SxQuSe.JGcpL-RbRzK .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{-webkit-border-radius:8px;border-radius:8px}.nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-bN97Pc-sM5MNb{display:-webkit-box;display:-webkit-flex;display:flex;-webkit-align-items:center;align-items:center;-webkit-flex-direction:row;flex-direction:row;justify-content:space-between;-webkit-flex-wrap:nowrap;flex-wrap:nowrap;height:100%;position:relative;width:100%}.nsm7Bb-HzV7m-LgbsSe .oXtfBe-l4eHX{justify-content:center}.nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-BPrWId{-webkit-flex-grow:1;flex-grow:1;font-family:"Google Sans",arial,sans-serif;font-weight:500;overflow:hidden;text-overflow:ellipsis;vertical-align:top}.nsm7Bb-HzV7m-LgbsSe.purZT-SxQuSe .nsm7Bb-HzV7m-LgbsSe-BPrWId{font-weight:300}.nsm7Bb-HzV7m-LgbsSe .oXtfBe-l4eHX .nsm7Bb-HzV7m-LgbsSe-BPrWId{-webkit-flex-grow:0;flex-grow:0}.nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-MJoBVe{-webkit-transition:background-color .218s;transition:background-color .218s;bottom:0;left:0;position:absolute;right:0;top:0}.nsm7Bb-HzV7m-LgbsSe:hover,.nsm7Bb-HzV7m-LgbsSe:focus{-webkit-box-shadow:none;box-shadow:none;border-color:#d2e3fc;outline:none}.nsm7Bb-HzV7m-LgbsSe:hover .nsm7Bb-HzV7m-LgbsSe-MJoBVe,.nsm7Bb-HzV7m-LgbsSe:focus .nsm7Bb-HzV7m-LgbsSe-MJoBVe{background:rgba(66,133,244,.04)}.nsm7Bb-HzV7m-LgbsSe:active .nsm7Bb-HzV7m-LgbsSe-MJoBVe{background:rgba(66,133,244,.1)}.nsm7Bb-HzV7m-LgbsSe.MFS4be-Ia7Qfc:hover .nsm7Bb-HzV7m-LgbsSe-MJoBVe,.nsm7Bb-HzV7m-LgbsSe.MFS4be-Ia7Qfc:focus .nsm7Bb-HzV7m-LgbsSe-MJoBVe{background:rgba(255,255,255,.24)}.nsm7Bb-HzV7m-LgbsSe.MFS4be-Ia7Qfc:active .nsm7Bb-HzV7m-LgbsSe-MJoBVe{background:rgba(255,255,255,.32)}.nsm7Bb-HzV7m-LgbsSe .n1UuX-DkfjY{-webkit-border-radius:50%;border-radius:50%;display:-webkit-box;display:-webkit-flex;display:flex;height:20px;margin-left:-4px;margin-right:8px;min-width:20px;width:20px}.nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-BPrWId{font-family:"Roboto";font-size:12px;text-align:left}.nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-BPrWId .ssJRIf,.nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-BPrWId .K4efff .fmcmS{overflow:hidden;text-overflow:ellipsis}.nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-BPrWId .K4efff{display:-webkit-box;display:-webkit-flex;display:flex;-webkit-align-items:center;align-items:center;color:#5f6368;fill:#5f6368;font-size:11px;font-weight:400}.nsm7Bb-HzV7m-LgbsSe.jVeSEe.MFS4be-Ia7Qfc .nsm7Bb-HzV7m-LgbsSe-BPrWId .K4efff{color:#e8eaed;fill:#e8eaed}.nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-BPrWId .K4efff .Bz112c{height:18px;margin:-3px -3px -3px 2px;min-width:18px;width:18px}.nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{-webkit-border-top-left-radius:0;border-top-left-radius:0;-webkit-border-bottom-left-radius:0;border-bottom-left-radius:0;-webkit-border-top-right-radius:3px;border-top-right-radius:3px;-webkit-border-bottom-right-radius:3px;border-bottom-right-radius:3px;margin-left:12px;margin-right:-10px}.nsm7Bb-HzV7m-LgbsSe.jVeSEe.JGcpL-RbRzK .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{-webkit-border-radius:18px;border-radius:18px}.L5Fo6c-sM5MNb{border:0;display:block;left:0;position:relative;top:0}.L5Fo6c-bF1uUb{-webkit-border-radius:4px;border-radius:4px;bottom:0;cursor:pointer;left:0;position:absolute;right:0;top:0}.L5Fo6c-bF1uUb:focus{border:none;outline:none}sentinel{}Sign inSkip to main contentBusy Beavers!Jim FisherGuide9 chapters37K learnersComing soon1. Uncomputable functionsComing soon2. Interpreters and universality3. The halting problemOr, Turing’s trick to troll any termination test0/244. Proofs about programs0/335. Gödel’s first incompleteness theorem0/26Coming soon6. Godel’s second incompleteness theorem7. Rice’s theorem0/31Coming soon8. Just how busy can a busy beaver be?Coming soon9. Quines and fixed pointsAn easy computation: I want this course.$19. Yours forever. 30-day money-back guarantee.Restart chapterShare chapter0/24The halting problemAn interactive tutorialWhat is ‘halting’?The halts functionImplementing haltsParadoxical self-referenceThe haltsOn functionSelf-reflecting functions 🪞Turing’s troll function 👺Trolling the troll 👺🪞If the troll halts on its own code ...If the troll does not halt on its own code ...Equivalence of halts and haltsOnCan we patch the bug? 🐛ConclusionSign in (Google/email)AccountWriter’s cornerSend feedbackBy using this site, you agree to our privacy policy.Skip to main contentBusy Beavers!Jim FisherGuide9 chapters37K learnersComing soon1. Uncomputable functionsComing soon2. Interpreters and universality3. The halting problemOr, Turing’s trick to troll any termination test0/244. Proofs about programs0/335. Gödel’s first incompleteness theorem0/26Coming soon6. Godel’s second incompleteness theorem7. Rice’s theorem0/31Coming soon8. Just how busy can a busy beaver be?Coming soon9. Quines and fixed pointsAn easy computation: I want this course.$19. Yours forever. 30-day money-back guarantee.Restart chapterShare chapterBusy Beavers!Jim FisherGuide9 chapters37K learnersComing soon1. Uncomputable functionsComing soon2. Interpreters and universality3. The halting problemOr, Turing’s trick to troll any termination test0/244. Proofs about programs0/335. Gödel’s first incompleteness theorem0/26Coming soon6. Godel’s second incompleteness theorem7. Rice’s theorem0/31Coming soon8. Just how busy can a busy beaver be?Coming soon9. Quines and fixed pointsAn easy computation: I want this course.$19. Yours forever. 30-day money-back guarantee.Busy Beavers!Jim FisherGuide9 chapters37K learnersJim FisherGuideGuide9 chapters37K learners9 chapters37K learnersComing soon1. Uncomputable functionsComing soon1. Uncomputable functionsComing soon2. Interpreters and universality2. Interpreters and universality3. The halting problemOr, Turing’s trick to troll any termination test0/243. The halting problemOr, Turing’s trick to troll any termination test3. The halting problemOr, Turing’s trick to troll any termination test0/244. Proofs about programs0/334. Proofs about programs0/335. Gödel’s first incompleteness theorem0/265. Gödel’s first incompleteness theorem0/26Coming soon6. Godel’s second incompleteness theorem6. Godel’s second incompleteness theorem7. Rice’s theorem0/317. Rice’s theorem0/31Coming soon8. Just how busy can a busy beaver be?8. Just how busy can a busy beaver be?Coming soon9. Quines and fixed points9. Quines and fixed pointsAn easy computation: I want this course.$19. Yours forever. 30-day money-back guarantee.An easy computation: I want this course.$19. Yours forever. 30-day money-back guarantee.Restart chapterShare chapter0/24The halting problemAn interactive tutorialWhat is ‘halting’?The halts functionImplementing haltsParadoxical self-referenceThe haltsOn functionSelf-reflecting functions 🪞Turing’s troll function 👺Trolling the troll 👺🪞If the troll halts on its own code ...If the troll does not halt on its own code ...Equivalence of halts and haltsOnCan we patch the bug? 🐛ConclusionThe halting problemAn interactive tutorialWhat is ‘halting’?The halts functionImplementing haltsParadoxical self-referenceThe haltsOn functionSelf-reflecting functions 🪞Turing’s troll function 👺Trolling the troll 👺🪞If the troll halts on its own code ...If the troll does not halt on its own code ...Equivalence of halts and haltsOnCan we patch the bug? 🐛ConclusionThe halting problemAn interactive tutorialWhat is ‘halting’?The halts functionhaltsImplementing haltsParadoxical self-referenceThe haltsOn functionhaltsOnSelf-reflecting functions 🪞Turing’s troll function 👺trollTrolling the troll 👺🪞If the troll halts on its own code ...If the troll does not halt on its own code ...Equivalence of halts and haltsOnCan we patch the bug? 🐛ConclusionSign in (Google/email)AccountWriter’s cornerSend feedbackBy using this site, you agree to our privacy policy.Sign in (Google/email)AccountWriter’s cornerSend feedbackBy using this site, you agree to our privacy policy.our privacy policyThe halting problemAn interactive tutorialPerhaps your code editor has warned you before: “Unreachable code detected!” But how does it know? And will it warn you about all lines that are unreachable? Back in 1936, before computers really existed, Alan Turing was already thinking about this problem. In this chapter, you’ll learn the most important result in computability theory: Turing’s trick to troll any termination test!Okay, no more halting, let’s go!What is ‘halting’?In this lesson, we’ll write programs in JavaScript. Here are three programs. Which one never halts, i.e. never prints "done"?// Program Aconsole.log('done');// Program Blet s = 'hi';for (let i = 0; i < s.length; i++) {  s = s + '!';}console.log('done');// Program Clet s = 'hi';while (s !== '') { s = ''; }console.log('done');Program AProgram BProgram CSo the last line of Program B will never be reached. But if you paste Program B into your code editor, you won’t get a warning saying “Unreachable code detected!” A while ago someone offered $1000 for a developer to fix this bug once and for all. What do you think — would you take the contract?Yes!No!The halts functionFor your code editor to detect all unreachable code, it would need a function called halts that takes some code as input, and returns true or false to say whether it finishes running. More precisely, we want a JavaScript function like this:function halts (code: string) {  // Would the string `code` halt  // when evaluated as JavaScript?  // Insert clever analysis here!  return wouldHalt;}Let’s write a test for halts. What should the following do?halts(`  let i = 1;  while (i !== 10) i += 2;  console.log(i);`)halts should return truehalts should return falsehalts should loop foreverImplementing haltsHow would you implement halts(code)? You could first try to parse the code as JavaScript: if it’s not valid JavaScript, you can return true (it would immediately crash). Then if the program has no loops or recursion, you should return ... truefalseAnd if the program starts with while(true){}, you should return ...truefalseYou could even run the program for a while with eval, and if it halts, then you can return true. But is it enough to just do all the checks we can think of? What we really need is a single, unified way to check whether any program halts.ContinueParadoxical self-referenceAlan Turing was thinking about this back in 1936, and came up with the surprising answer: whatever version of halts you write, it will always have a bug!Here’s a strange starting point: consider the sentence “this sentence is false”. Is that sentence true or false?It’s true!It’s false!It’s neither!It’s weird, isn’t it? This sentence is confusing because it’s able to refer to itself. There are many other paradoxes like this. The insight underlying Turing’s proof, and many other many interesting theorems, is that self-reference often leads to weird paradoxes.There are hints of self-reference in the description of halts: it’s a program that reasons about programs. So Turing starts thinking ... what would halts say if we asked it whether halts halts?ContinueThe haltsOn functionHowever, we can’t just ask whether halts halts. It’s a function, so we must ask whether it halts on a particular input. So we need to change the problem a bit: rather than seeking a function halts(code), we’re going to seek a function haltsOn(funcStr, argStr). It should tell us whether the function would halt when given a specific argument.Let’s write some tests for haltsOn. Here’s one:const isSmallNum = `function (n) {  return n < 3;}`;haltsOn(isSmallNum, '2')Wait, why is '2' a string?I’m glad you asked! It’s for the same reason that code and funcStr are strings: we’re giving haltsOn raw source code access, so we pass it the JavaScript string representation of the argument.Anyway, I’ll give you this one for free: haltsOn should return true, because the following program will halt:const f = function (n) {  return n < 3;};f(2);Now it’s your turn: what should the following program do?const funcStr = `function (s) {  while (s === "foo") { }}`;haltsOn(funcStr, '"foo"')Should return trueShould return falseShould loop foreverSelf-reflecting functions 🪞Anyway, Turing was thinking about functions that can look at their own source code. Here’s an innocent function that, given a string, extracts the first number in it:function firstNumberIn(str: string) {  return /d+/.exec(str)[0];}For example, firstNumberIn("testing 1 2 3") would return "1". But what would firstNumberIn return when given its own source code?10"0"It would not haltSimilarly, we can ask whether functions will halt when given their own source code. Try this one out:function (s) {  if (s.includes("froot")) {    while (true);  }}What does this function do when given its own source code?It haltsIt loops forever(You could actually replace "froot" with any other string, and it would still loop when given its own source code. That should be a hint that things are getting weird.)But we don’t have to analyze this ourselves: we can just ask haltsOn! Here’s how:function haltsOnSelf(funcStr: string) {  return haltsOn(    funcStr,    JSON.stringify(funcStr)  );}(Notice the JSON.stringify. Without this, we would not be passing the source code to the function; we would be passing a literal function as the argument.)Here’s an example:haltsOnSelf(`function (s) {  while (s.length > 1000) { }}`)What should the above return?Should return trueShould return falseTuring’s troll function 👺This is getting very loopy, isn’t it? Stay strapped in, because there’s one more level of loopiness to come! Turing now defines a devilish function, troll, which looks like this:function troll(funcStr: string) {  if (haltsOnSelf(funcStr)) {    while (true) { }  }}Turing’s troll function looks bizarre! Given a funcStr, it either halts or loops forever. To decide, the troll asks haltsOnSelf what the function would do when given its own source code, and then the troll does the opposite! That is, if funcStr would halt on its own source code, then troll does not halt; but if funcStr would not halt on its own source code, then troll halts.Let’s work through some examples. What will the following do?troll(`function (s) {  return true;}`)troll will halttroll will loop foreverLet’s try another one. What would the following do?troll(`function (s) {  while (true) { }}`)troll will halttroll will loop foreverTrolling the troll 👺🪞Now, the function troll, like any other JavaScript value, can be encoded as a string:const trollStr = `function (funcStr) {  if (haltsOnSelf(funcStr)) {    while (true) { }  }}`;Now comes Turing’s truly crazy thought: what happens when we call troll on its own source code? That is, what happens if we run troll(trollStr)? Luckily, we can answer that: just run haltsOnSelf(trollStr)!Now, haltsOnSelf(trollStr) is either true or false. And it turns out that, in either case, we get a strange contradiction ...If the troll halts on its own code ...Let’s first assume haltsOnSelf(trollStr) returns true. Then what is halts claiming that troll(trollStr) will do?It claims troll(trollStr) would haltIt claims troll(trollStr) would loop foreverNow read the definition of troll: what would troll(trollStr) actually do?troll(trollStr) would halttroll(trollStr) would loop foreverSo if haltsOnSelf(trollStr) returns true, it would be wrong!If the troll does not halt on its own code ...Not so bad perhaps: surely haltsOnSelf(trollStr) must return false, then?Let’s try it. Now assume haltsOnSelf(trollStr) returns false. Then halts is claiming that troll(trollStr) will not halt.But now read the definition of troll: if haltsOnSelf(trollStr) returns false, what would troll(trollStr) actually do?troll(trollStr) would halttroll(trollStr) would loop foreverAgain, haltsOnSelf is wrong: it claimed that  troll(trollStr) would not halt, but upon inspection, it clearly would halt! Whatever haltsOnSelf claims troll will do, troll maliciously does the opposite!So, our haltsOnSelf has a bug: it gives the wrong answer for the input trollStr. But where is the bug, exactly? Turing’s says: the bug is in the haltsOn function that we assumed the existence of.Whatever version of haltsOn we’re given, we can show that it has a bug. That is, there is no function that correctly solves the halting problem!Wait, what about halts, not haltsOn?Equivalence of halts and haltsOnWe originally asked for a function halts, rather than haltsOn. But it turns out that they’re equivalent. If we assume that we have a correct halts, then we can write a correct haltsOn like so:function haltsOn(funcStr, argStr) {  return halts(`    const f = ${funcStr};    f(${argStr});  `);}This shows that halts is not possible either, because it would lead to a correct haltsOn, which we just saw is not possible.But note that you could actually define them the other way around! Here’s an exercise: assuming you have haltsOn, write an implementation of halts.Okay, I did it!Nah, just show me.function halts(code: string) {  return haltsOn(    // Ignore argument, just run code    `function(_) { ${code} }`,    // Can be anything - it's ignored!    '0'  );}So, halts and haltsOn have equivalent power. For this reason, you’ll often see authors casually jump between one and the other.ContinueCan we patch the bug? 🐛You might be wondering: can’t we just fix patch the bug in haltsOn? Let’s try defining a haltsOn_v2 that just patches over this bug:function haltsOn_v2(funcStr, argStr) {  if (funcStr === trollStr &&      argStr === JSON.stringify(trollStr)) {    // Patch over the bug!    return !haltsOn(funcStr, argStr);  }  // Otherwise it's probably right?  return haltsOn(funcStr, argStr);}Does haltsOn_v2 have a bug?Yes, haltsOn_v2 can give wrong answersNo, haltsOn_v2 is bug freeConclusionThe point is: whatever implementation of halts you provide, we can write a version of troll that proves it has a bug!Halt chapter ✋End notes:Turing’s troll function is usually called g. Thanks to an anonymous reviewer for suggesting the name “troll”!Next in Busy Beavers!:4. Proofs about programsHang on, didn’t we just prove computers can’t decide whether programs halt? Not so fast! In this chapter, we’ll use Lean, a programming language and proof assistant, to prove whether some specific programs halt. Suck it, Turing!0/33<div class="Alert_root__xDLoq Alert_Warning__o75pu">JavaScript is disabled. Some features will not work.</div>Perhaps your code editor has warned you before: “Unreachable code detected!” But how does it know? And will it warn you about all lines that are unreachable? Back in 1936, before computers really existed, Alan Turing was already thinking about this problem. In this chapter, you’ll learn the most important result in computability theory: Turing’s trick to troll any termination test!allOkay, no more halting, let’s go!In this lesson, we’ll write programs in JavaScript. Here are three programs. Which one never halts, i.e. never prints "done"?"done"// Program Aconsole.log('done');// Program Aconsolelog'done''// Program Blet s = 'hi';for (let i = 0; i < s.length; i++) {  s = s + '!';}console.log('done');// Program Blets='hi'fori0<length+++'!'// Program Clet s = 'hi';while (s !== '') { s = ''; }console.log('done');// Program Cwhile!==''Program AProgram BProgram CProgram AAProgram BBProgram CCNo, program A prints 'done', then halts.The answer is actually program B: it loops forever adding exclamation marks to s, starting with s='hi', then s='hi!', then s='hi!!', and so on. The loop variable i never catches up with the end of the string!OkayNo, program A prints 'done', then halts.The answer is actually program B: it loops forever adding exclamation marks to s, starting with s='hi', then s='hi!', then s='hi!!', and so on. The loop variable i never catches up with the end of the string!s='hi's='hi!'s='hi!!'OkayRight! Program B loops forever adding exclamation marks to s.No, Program C does halt. It enters the while loop once, which sets s to the empty string, after which the test s !== '' fails, then the program halts.The answer is actually program B: it loops forever adding exclamation marks to s, starting with s='hi', then s='hi!', then s='hi!!', and so on. The loop variable i never catches up with the end of the string!OkayNo, Program C does halt. It enters the while loop once, which sets s to the empty string, after which the test s !== '' fails, then the program halts.s !== ''So the last line of Program B will never be reached. But if you paste Program B into your code editor, you won’t get a warning saying “Unreachable code detected!” A while ago someone offered $1000 for a developer to fix this bug once and for all. What do you think — would you take the contract?someone offered $1000Yes!No!Yes!No!Okay! In this chapter, you’ll learn whether that was a wise choice.Brave! In this chapter, you’ll learn whether that was a wise choice.For your code editor to detect all unreachable code, it would need a function called halts that takes some code as input, and returns true or false to say whether it finishes running. More precisely, we want a JavaScript function like this:truefalsefunction halts (code: string) {  // Would the string `code` halt  // when evaluated as JavaScript?  // Insert clever analysis here!  return wouldHalt;}functioncode:string// Would the string `code` halt// when evaluated as JavaScript?// Insert clever analysis here!returnwouldHaltLet’s write a test for halts. What should the following do?halts(`  let i = 1;  while (i !== 10) i += 2;  console.log(i);`)`  let i = 1;  while (i !== 10) i += 2;  console.log(i);halts should return truehalts should return falsehalts should loop foreverhalts should return truehalts should return falsehalts should loop foreverNo, it should actually return false, because the following program loops forever:let i = 1;while (i !== 10) i += 2;console.log(i);(Notice that the values of i go 1, 3, 7, 9, 11, ... and never hit 10.)OkayNo, it should actually return false, because the following program loops forever:let i = 1;while (i !== 10) i += 2;console.log(i);110+=2(Notice that the values of i go 1, 3, 7, 9, 11, ... and never hit 10.)37911Right! The program passed in never halts, because the values of i never hit 10, so halts returns false.No, not quite. Perhaps you were saying that the following program never halts:let i = 1;while (i !== 10) i += 2;console.log(i);If so, you’d be right! (Because the values of i go 1, 3, 7, 9, 11, ... and never hit 10.)However, the halts function should always halt on every input. If the program passed in will halt, it should return true, and if the program passed in would not halt, it should return false.OkayNo, not quite. Perhaps you were saying that the following program never halts:If so, you’d be right! (Because the values of i go 1, 3, 7, 9, 11, ... and never hit 10.)However, the halts function should always halt on every input. If the program passed in will halt, it should return true, and if the program passed in would not halt, it should return false.alwaysHow would you implement halts(code)? You could first try to parse the code as JavaScript: if it’s not valid JavaScript, you can return true (it would immediately crash). Then if the program has no loops or recursion, you should return ... halts(code)truefalseNo, you should return true, because a program without loops or recursion is a finite sequence of statements. If you find a way around this, email me!OkayNo, you should return true, because a program without loops or recursion is a finite sequence of statements. If you find a way around this, email me!And if the program starts with while(true){}, you should return ...while(true){}No, you should return false, because while(true){} never halts, so the whole program will never halt.OkayNo, you should return false, because while(true){} never halts, so the whole program will never halt.You could even run the program for a while with eval, and if it halts, then you can return true. But is it enough to just do all the checks we can think of? What we really need is a single, unified way to check whether any program halts.evalContinueAlan Turing was thinking about this back in 1936, and came up with the surprising answer: whatever version of halts you write, it will always have a bug!Here’s a strange starting point: consider the sentence “this sentence is false”. Is that sentence true or false?“this sentence is false”It’s true!It’s false!It’s neither!It’s true!It’s false!It’s neither!Well, if “this sentence is false” is true, then you should believe what it says: it’s false! And vice versa. No, I think the most reasonable answer is that it’s neither true nor false.Well, if “this sentence is false” is false, then you should believe the opposite of what it says: that the sentence is true! And vice versa. No, I think the most reasonable answer is that it’s neither true nor false.I think so too!It’s weird, isn’t it? This sentence is confusing because it’s able to refer to itself. There are many other paradoxes like this. The insight underlying Turing’s proof, and many other many interesting theorems, is that self-reference often leads to weird paradoxes.self-reference often leads to weird paradoxes.There are hints of self-reference in the description of halts: it’s a program that reasons about programs. So Turing starts thinking ... what would halts say if we asked it whether halts halts?programprogramsHowever, we can’t just ask whether halts halts. It’s a function, so we must ask whether it halts on a particular input. So we need to change the problem a bit: rather than seeking a function halts(code), we’re going to seek a function haltsOn(funcStr, argStr). It should tell us whether the function would halt when given a specific argument.on a particular inputhaltsOn(funcStr, argStr)Let’s write some tests for haltsOn. Here’s one:const isSmallNum = `function (n) {  return n < 3;}`;haltsOn(isSmallNum, '2')constisSmallNum`function (n) {  return n < 3;}`'2'Wait, why is '2' a string?I’m glad you asked! It’s for the same reason that code and funcStr are strings: we’re giving haltsOn raw source code access, so we pass it the JavaScript string representation of the argument.funcStrAnyway, I’ll give you this one for free: haltsOn should return true, because the following program will halt:const f = function (n) {  return n < 3;};f(2);fnNow it’s your turn: what should the following program do?const funcStr = `function (s) {  while (s === "foo") { }}`;haltsOn(funcStr, '"foo"')`function (s) {  while (s === "foo") { }'"foo"'Should return trueShould return falseShould loop foreverShould return trueShould return falseShould loop foreverIndeed, the following program will never halt, so haltsOn should return false:const f = function (s) {  while (s === "foo") { }};f("foo");Indeed, the following program will never halt, so haltsOn should return false:const f = function (s) {  while (s === "foo") { }};f("foo");==="foo""No, haltsOn should actually return false, because the following program never halts:const f = function (s) {  while (s === "foo") { }};f("foo");OkayNo, haltsOn should actually return false, because the following program never halts:No: haltsOn should always halt, returning either true or false. In this case, the program it’s analyzing is:const f = function (s) {  while (s === "foo") { }};f("foo");This program does not halt, so haltsOn should return false.OkayNo: haltsOn should always halt, returning either true or false. In this case, the program it’s analyzing is:This program does not halt, so haltsOn should return false.Anyway, Turing was thinking about functions that can look at their own source code. Here’s an innocent function that, given a string, extracts the first number in it:functions that can look at their own source code.function firstNumberIn(str: string) {  return /d+/.exec(str)[0];}firstNumberInstr /d+//execFor example, firstNumberIn("testing 1 2 3") would return "1". But what would firstNumberIn return when given its own source code?firstNumberIn("testing 1 2 3")"1"its own source code10"0"It would not halt"0"It would not haltSimilarly, we can ask whether functions will halt when given their own source code. Try this one out:function (s) {  if (s.includes("froot")) {    while (true);  }}ifincludes"froot"What does this function do when given its own source code?It haltsIt loops foreverIt haltsIt loops foreverIt actually loops forever. This strange function checks whether its input contains the string "froot", and if so, it loops forever. Now check the function’s source code: it contains the string "froot" in the second line. So this function would loop when given its own source code!OkayIt actually loops forever. This strange function checks whether its input contains the string "froot", and if so, it loops forever. Now check the function’s source code: it contains the string "froot" in the second line. So this function would loop when given its own source code!(You could actually replace "froot" with any other string, and it would still loop when given its own source code. That should be a hint that things are getting weird.)But we don’t have to analyze this ourselves: we can just ask haltsOn! Here’s how:function haltsOnSelf(funcStr: string) {  return haltsOn(    funcStr,    JSON.stringify(funcStr)  );}haltsOnSelfJSONstringify(Notice the JSON.stringify. Without this, we would not be passing the source code to the function; we would be passing a literal function as the argument.)JSON.stringifyHere’s an example:haltsOnSelf(`function (s) {  while (s.length > 1000) { }}`)  while (s.length > 1000) { }What should the above return?Should return trueShould return falseRight! The function’s source code is much shorter than 1000 characters, so it never enters the loop.No, it should return true. The function loops forever if its input string has more than 1000 characters. But its own source code is much shorter than that, so it halts immediately. Therefore, haltsOnSelf must return true.OkayNo, it should return true. The function loops forever if its input string has more than 1000 characters. But its own source code is much shorter than that, so it halts immediately. Therefore, haltsOnSelf must return true.This is getting very loopy, isn’t it? Stay strapped in, because there’s one more level of loopiness to come! Turing now defines a devilish function, troll, which looks like this:function troll(funcStr: string) {  if (haltsOnSelf(funcStr)) {    while (true) { }  }}Turing’s troll function looks bizarre! Given a funcStr, it either halts or loops forever. To decide, the troll asks haltsOnSelf what the function would do when given its own source code, and then the troll does the opposite! That is, if funcStr would halt on its own source code, then troll does not halt; but if funcStr would not halt on its own source code, then troll halts.bizarre!Let’s work through some examples. What will the following do?troll(`function (s) {  return true;}`)  return true;troll will halttroll will loop forevertroll will halttroll will loop foreverNo, troll actually would loop forever! It first consults haltsOnSelf, which tells us whether this strange program halts:const f = function (s) {  return true;};f(`function (s) {  return true;}`);Try it for yourself: the above program halts. Because of this, troll then goes into an infinite loop.OkayNo, troll actually would loop forever! It first consults haltsOnSelf, which tells us whether this strange program halts:const f = function (s) {  return true;};f(`function (s) {  return true;}`);Try it for yourself: the above program halts. Because of this, troll then goes into an infinite loop.Right! The program halts when run on its own source code, so troll decides to loop forever.Let’s try another one. What would the following do?troll(`function (s) {  while (true) { }}`)  while (true) { }Right: the function passed in loops forever, so troll will halt.No, troll will actually halt, because the following program loops forever:const f = function (s) {  while (true) { }};f(`function (s) {  while (true) { }}`);OkayNo, troll will actually halt, because the following program loops forever:const f = function (s) {  while (true) { }};f(`function (s) {  while (true) { }}`);Now, the function troll, like any other JavaScript value, can be encoded as a string:const trollStr = `function (funcStr) {  if (haltsOnSelf(funcStr)) {    while (true) { }  }}`;trollStr`function (funcStr) {  if (haltsOnSelf(funcStr)) {    while (true) { }  }Now comes Turing’s truly crazy thought: what happens when we call troll on its own source code? That is, what happens if we run troll(trollStr)? Luckily, we can answer that: just run haltsOnSelf(trollStr)!troll(trollStr)haltsOnSelf(trollStr)Now, haltsOnSelf(trollStr) is either true or false. And it turns out that, in either case, we get a strange contradiction ...Let’s first assume haltsOnSelf(trollStr) returns true. Then what is halts claiming that troll(trollStr) will do?It claims troll(trollStr) would haltIt claims troll(trollStr) would loop foreverIt claims troll(trollStr) would haltIt claims troll(trollStr) would loop foreverRemember the meaning of haltsOnSelf(funcStr): it tells us whether the function would halt when given its own source code. So if haltsOnSelf(trollStr) returns true, it’s saying that troll(trollStr) halts.OkayRemember the meaning of haltsOnSelf(funcStr): it tells us whether the function would halt when given its own source code. So if haltsOnSelf(trollStr) returns true, it’s saying that troll(trollStr) halts.haltsOnSelf(funcStr)Now read the definition of troll: what would troll(trollStr) actually do?actuallytroll(trollStr) would halttroll(trollStr) would loop forevertroll(trollStr) would halttroll(trollStr) would loop foreverActually, troll would loop forever! The first thing troll(trollStr) does is query haltsOnSelf(trollStr). We’ve assumed that this returns true. In this case, troll maliciously loops forever!OkayActually, troll would loop forever! The first thing troll(trollStr) does is query haltsOnSelf(trollStr). We’ve assumed that this returns true. In this case, troll maliciously loops forever!So if haltsOnSelf(trollStr) returns true, it would be wrong!Not so bad perhaps: surely haltsOnSelf(trollStr) must return false, then?Let’s try it. Now assume haltsOnSelf(trollStr) returns false. Then halts is claiming that troll(trollStr) will not halt.But now read the definition of troll: if haltsOnSelf(trollStr) returns false, what would troll(trollStr) actually do?Actually, it would halt. The first thing troll(trollStr) does is query haltsOnSelf(trollStr). We’ve assumed that this returns false. In this case, troll maliciously halts instead of looping forever!OkayActually, it would halt. The first thing troll(trollStr) does is query haltsOnSelf(trollStr). We’ve assumed that this returns false. In this case, troll maliciously halts instead of looping forever!Right, it would halt.Again, haltsOnSelf is wrong: it claimed that  troll(trollStr) would not halt, but upon inspection, it clearly would halt! Whatever haltsOnSelf claims troll will do, troll maliciously does the opposite!wouldSo, our haltsOnSelf has a bug: it gives the wrong answer for the input trollStr. But where is the bug, exactly? Turing’s says: the bug is in the haltsOn function that we assumed the existence of.Whatever version of haltsOn we’re given, we can show that it has a bug. That is, there is no function that correctly solves the halting problem!Wait, what about halts, not haltsOn?We originally asked for a function halts, rather than haltsOn. But it turns out that they’re equivalent. If we assume that we have a correct halts, then we can write a correct haltsOn like so:function haltsOn(funcStr, argStr) {  return halts(`    const f = ${funcStr};    f(${argStr});  `);}argStr    const f = ${funcStr};    f(${argStr});  `This shows that halts is not possible either, because it would lead to a correct haltsOn, which we just saw is not possible.But note that you could actually define them the other way around! Here’s an exercise: assuming you have haltsOn, write an implementation of halts.Okay, I did it!Nah, just show me.Okay, I did it!Nah, just show me.Great! Perhaps your implementation looked like this:No worries. Here’s a possible implementation:function halts(code: string) {  return haltsOn(    // Ignore argument, just run code    `function(_) { ${code} }`,    // Can be anything - it's ignored!    '0'  );}// Ignore argument, just run code`function(_) { ${code} }`// Can be anything - it's ignored!'0'So, halts and haltsOn have equivalent power. For this reason, you’ll often see authors casually jump between one and the other.You might be wondering: can’t we just fix patch the bug in haltsOn? Let’s try defining a haltsOn_v2 that just patches over this bug:haltsOn_v2function haltsOn_v2(funcStr, argStr) {  if (funcStr === trollStr &&      argStr === JSON.stringify(trollStr)) {    // Patch over the bug!    return !haltsOn(funcStr, argStr);  }  // Otherwise it's probably right?  return haltsOn(funcStr, argStr);}&&// Patch over the bug!!// Otherwise it's probably right?Does haltsOn_v2 have a bug?Yes, haltsOn_v2 can give wrong answersNo, haltsOn_v2 is bug freeYes, haltsOn_v2 can give wrong answersNo, haltsOn_v2 is bug freeActually, haltsOn_v2 has a bug too, and we can show it in exactly the same way we did for haltsOn! We define a new troll_v2 that uses haltsOn_v2, in exactly the same way we did for the original haltsOn:function troll_v2(funcStr) {  if (haltsOn_v2(funcStr, funcStr)) {    while (true) { }  // loop forever  } else {    return;  // halt  }}Using the same reasoning as before, we can conclude that haltsOn_v2 gives the wrong answer to the input troll_v2Str.OkayActually, haltsOn_v2 has a bug too, and we can show it in exactly the same way we did for haltsOn! We define a new troll_v2 that uses haltsOn_v2, in exactly the same way we did for the original haltsOn:troll_v2function troll_v2(funcStr) {  if (haltsOn_v2(funcStr, funcStr)) {    while (true) { }  // loop forever  } else {    return;  // halt  }}// loop foreverelse// haltUsing the same reasoning as before, we can conclude that haltsOn_v2 gives the wrong answer to the input troll_v2Str.troll_v2StrRight! We can show haltsOn_v2 has a bug in exactly the same way, by defining a new troll_v2 that uses haltsOn_v2.The point is: whatever implementation of halts you provide, we can write a version of troll that proves it has a bug!This is ‘the halting problem’. I bet you’re regretting taking that contract now! You’ll never be able to complete it. Fortunately, you can complete this chapter now.canThis is ‘the halting problem’. Your instincts were good, and you were wise not to take that contract! You’d never have been able to complete it! Fortunately, you can complete this chapter now.Halt chapter ✋End notes:Turing’s troll function is usually called g. Thanks to an anonymous reviewer for suggesting the name “troll”!Turing’s  function is usually called g. Thanks to an anonymous reviewer for suggesting the name “troll”!Next in Busy Beavers!:4. Proofs about programsHang on, didn’t we just prove computers can’t decide whether programs halt? Not so fast! In this chapter, we’ll use Lean, a programming language and proof assistant, to prove whether some specific programs halt. Suck it, Turing!0/33Next in Busy Beavers!:4. Proofs about programsHang on, didn’t we just prove computers can’t decide whether programs halt? Not so fast! In this chapter, we’ll use Lean, a programming language and proof assistant, to prove whether some specific programs halt. Suck it, Turing!0/334. Proofs about programsHang on, didn’t we just prove computers can’t decide whether programs halt? Not so fast! In this chapter, we’ll use Lean, a programming language and proof assistant, to prove whether some specific programs halt. Suck it, Turing!Hang on, didn’t we just prove computers can’t decide whether programs halt? Not so fast! In this chapter, we’ll use Lean, a programming language and proof assistant, to prove whether some specific programs halt. Suck it, Turing!LeanQuoted text: Send feedback 📩Your feedback will be sent privately to the author. They may reply to you by email. Thanks for helping make this course better!Quoted text: Send feedback 📩Your feedback will be sent privately to the author. They may reply to you by email. Thanks for helping make this course better!Send feedback 📩Your feedback will be sent privately to the author. They may reply to you by email. Thanks for helping make this course better!{"props":{"pageProps":{"lessonRoot":{"type":"root","docVersionType":"published","courseRoot":{"type":"course","docVersionType":"published","id":"C:tWWwvJDWlo","slug":"busy-beavers","author":{"id":"dummy","avatarKey":null,"name":null},"plaintextTitle":"Busy Beavers!","plaintextDescription":"What can computers do? What are the limits of mathematics? And just how busy can a busy beaver be? In this course, you and I will take a practical and modern approach to answering these questions — or at least learning why some questions are unanswerable!","approxLearnerCount":"37K","lessonIds":[null,null,"fr9uub3hqgab","L-il6foo6sa9","H7XOvXvC_x",null,"L-kx5ozDTpEU",null,null],"priceUsdDollars":19,"children":[{"type":"image","alt":"An illustration of a beaver writing numbers on a very long roll of tape","key":"c10dd89877cf93e87b31c342170ab2e604768c7d9e5172c3c740fa2a26035bca.png","darkMode":"invert","mimeType":"image/png","width":1600,"height":549},{"type":"h1","id":"busy-beavers","children":[{"text":"Busy Beavers!"}]},{"type":"h2","id":"an-interactive-intro-to-computability-theory","children":[{"text":"An interactive intro to Computability Theory"}]},{"type":"p","children":[{"text":"What can computers do? What are the limits of mathematics? And just how busy can a busy beaver be? In this course, you and I will take a practical and modern approach to answering these questions — or at least learning why some questions are unanswerable!"}]},{"type":"p","children":[{"text":"The only prerequisite is that you’re comfortable coding. I prefer code like "},{"type":"inlinecode","children":[{"text":"f(x)"}]},{"text":" instead of math squiggles like "},{"type":"inlinemath","htmlOrError":"\u003cspan class=\"katex\"\u003e\u003cspan class=\"katex-html\" aria-hidden=\"true\"\u003e\u003cspan class=\"base\"\u003e\u003cspan class=\"strut\" style=\"height:0.8414em;vertical-align:-0.15em;\"\u003e\u003c/span\u003e\u003cspan class=\"mord\"\u003e\u003cspan class=\"mord mathfrak\"\u003eF\u003c/span\u003e\u003cspan class=\"msupsub\"\u003e\u003cspan class=\"vlist-t vlist-t2\"\u003e\u003cspan class=\"vlist-r\"\u003e\u003cspan class=\"vlist\" style=\"height:0.1514em;\"\u003e\u003cspan style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"\u003e\u003cspan class=\"pstrut\" style=\"height:2.7em;\"\u003e\u003c/span\u003e\u003cspan class=\"sizing reset-size6 size3 mtight\"\u003e\u003cspan class=\"mord mathnormal mtight\"\u003ex\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"vlist-s\"\u003e​\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"vlist-r\"\u003e\u003cspan class=\"vlist\" style=\"height:0.15em;\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e"},{"text":". Less "},{"type":"inlinemath","htmlOrError":"\u003cspan class=\"katex\"\u003e\u003cspan class=\"katex-html\" aria-hidden=\"true\"\u003e\u003cspan class=\"base\"\u003e\u003cspan class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"\u003e\u003c/span\u003e\u003cspan class=\"mord mathnormal\" style=\"margin-right:0.05556em;\"\u003eγ\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e"},{"text":"s, more "},{"type":"inlinecode","children":[{"text":"g"}]},{"text":"s. I try to use modern concepts (strings) instead of the original hacks (Gödel numbering). I do examples first; abstraction later. I emphasize real-world languages (mainly JavaScript) rather than Turing Machines and pseudocode."}]},{"type":"buy","children":[{"text":"An easy computation: I want this course."}]},{"type":"p","children":[{"text":"(If you want to know when a new chapter comes out, ","italic":true},{"type":"link","children":[{"text":"sign up for updates here!","italic":true}],"href":"https://tigyog.app/d/C:tWWwvJDWlo/enrollment"},{"text":")","italic":true}]},{"type":"h2","id":"what-s-in-the-course","children":[{"text":"What’s in the course?"}]},{"type":"p","children":[{"text":"Ten chapters. Six are still in the oven, and they’ll arrive when they’re cooked. You’ll get your money’s worth (or your money back)."}]},{"type":"lessonlink","children":[{"type":"h1","id":"1-uncomputable-functions","children":[{"text":"1. Uncomputable functions"}]},{"type":"p","children":[{"text":"In this intro chapter, we’ll discover that there are functions that you can’t write in JavaScript (or any other programming language)."}]}],"lesson":null},{"type":"lessonlink","children":[{"type":"h1","id":"2-interpreters-and-universality","children":[{"text":"2. Interpreters and universality"}]},{"type":"p","children":[{"text":"A modern developer’s laptop is littered with VMs, containers, code sandboxes, et cetera. The concept of "},{"text":"simulation","italic":true},{"text":" might seem obvious — but it certainly wasn’t when Alan Turing discovered the concept. In this chapter, we’ll implement an "},{"text":"interpreter","italic":true},{"text":", which is the modern equivalent of Turing’s “Universal Computing Machine”, and which is key to understanding Turing’s solution to the halting problem."}]}],"lesson":null},{"type":"lessonlink","children":[{"type":"h1","id":"3-the-halting-problem","children":[{"text":"3. The halting problem"}]},{"type":"h2","id":"or-turing-s-trick-to-troll-any-termination-test","children":[{"text":"Or, Turing’s trick to troll any termination test"}]},{"type":"p","children":[{"text":"Perhaps your IDE has warned you before: “this code is unreachable”. How useful! Can we get your IDE to warn you about all lines that are unreachable. Back in 1936, before computers really existed, Alan Turing was already thinking about this problem, and he has bad news for you ..."}]},{"type":"p","children":[{"bold":true,"text":"(This chapter is free while stocks last!)"}]}],"lesson":{"id":"fr9uub3hqgab","slug":["busy-beavers","the-halting-problem"],"plaintextTitle":"The halting problem","docVersionType":"published","sections":[{"title":[{"text":"The halting problem"}],"id":"the-halting-problem","promptIds":[]},{"title":[{"text":"An interactive tutorial"}],"id":"an-interactive-tutorial","promptIds":["pr-sraw3zkm1qsk"]},{"title":[{"text":"What is ‘halting’?"}],"id":"what-is-halting","promptIds":["pr-r6djuvhoew07","pr-h7e4aqmip86h"]},{"title":[{"text":"The "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":" function"}],"id":"the-halts-function","promptIds":["pr-2HJaiGEdb0"]},{"title":[{"text":"Implementing "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":""}],"id":"implementing-halts","promptIds":["pr-PSbnVE54M7","pr-fqWd9IWCAP","pr-IP7eTLHhYF"]},{"title":[{"text":"Paradoxical self-reference"}],"id":"paradoxical-self-reference","promptIds":["pr-x9q26hISZD","pr-Ijzz6tHb9a"]},{"title":[{"text":"The "},{"type":"inlinecode","children":[{"text":"haltsOn"}]},{"text":" function"}],"id":"the-halts-on-function","promptIds":["pr-odeOO5NqZO","pr-b6htfzz0s19u"]},{"title":[{"text":"Self-reflecting functions 🪞"}],"id":"self-reflecting-functions","promptIds":["pr-umygYmgYCh","pr-MGt81gc7Id","pr-92SJz8SSu7"]},{"title":[{"text":"Turing’s "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" function 👺"}],"id":"turing-s-troll-function","promptIds":["pr-o9tq8m2jezp3","pr-k8k2xk1m15mj"]},{"title":[{"text":"Trolling the "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" 👺🪞"}],"id":"trolling-the-troll","promptIds":[]},{"title":[{"text":"If the "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" halts on its own code ..."}],"id":"if-the-troll-halts-on-its-own-code","promptIds":["pr-02tuo110jfi8","pr-5aygghu1zao9"]},{"title":[{"text":"If the "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" does not halt on its own code ..."}],"id":"if-the-troll-does-not-halt-on-its-own-code","promptIds":["pr-zkax6xivmadi","pr-nCMxrUNepY"]},{"title":[{"text":"Equivalence of "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":" and "},{"type":"inlinecode","children":[{"text":"haltsOn"}]},{"text":""}],"id":"equivalence-of-halts-and-halts-on","promptIds":["pr-pbelcdi0c3sm","pr-rp9PwWaWsO"]},{"title":[{"text":"Can we patch the bug? 🐛"}],"id":"can-we-patch-the-bug","promptIds":["pr-90LNbAKSz0"]},{"title":[{"text":"Conclusion"}],"id":"conclusion","promptIds":["pr-si562wjwp7tq"]}]}},{"type":"lessonlink","children":[{"type":"h1","id":"4-proofs-about-programs","children":[{"text":"4. Proofs about programs"}]},{"type":"p","children":[{"text":"Hang on, didn’t we just prove computers can’t decide whether programs halt? Not so fast! In this chapter, we’ll use "},{"bold":true,"text":"Lean"},{"text":", a programming language and proof assistant, to prove whether some specific programs halt. Suck it, Turing!"}]}],"lesson":{"id":"L-il6foo6sa9","slug":["busy-beavers","proofs-about-programs"],"plaintextTitle":"Proofs about programs","docVersionType":"published","sections":[{"title":[{"text":"Proofs about programs"}],"id":"proofs-about-programs","promptIds":[]},{"title":[{"text":"An interactive tutorial"}],"id":"an-interactive-tutorial","promptIds":["pr-jsosdr2uoo","pr-6lw5vwg-n6","pr-h-8343x66o","pr-cakl46el-8"]},{"title":[{"text":"Mathematical induction 🍳"}],"id":"mathematical-induction","promptIds":["pr-pzid60adiv","pr-kxow-3z6hb","pr-x2x-4ch4tj"]},{"title":[{"text":"Once more, in Lean"}],"id":"once-more-in-lean","promptIds":["pr-7d4wqcq9d0"]},{"title":[{"text":"The Ackermann function ♾️"}],"id":"the-ackermann-function","promptIds":["pr-jft0t4nygr","pr-51gt0kg5n7","pr-u1-7i6266-","pr-oqcjekm-lb","pr-98ju6uv7mr","pr-tdgx2x1wzm"]},{"title":[{"text":"Noetherian induction"}],"id":"noetherian-induction","promptIds":["pr-zdgatixhq0","pr-yoz4tvmv-u"]},{"title":[{"text":"Well-ordering"}],"id":"well-ordering","promptIds":["pr-z3p28k0by6","pr-mlkfykjxs8","pr-hu70w2yy2-"]},{"title":[{"text":"Proving machines halt 🤚"}],"id":"proving-machines-halt","promptIds":["pr-btchz-vtf9","pr-k339d9whp0","pr-aud7tl8-pm","pr-llh2bxwcp9","pr-yxo59mqxt8","pr-gg3k1569cx"]},{"title":[{"text":"Proving programs "},{"text":"don’t","italic":true},{"text":" halt ➿"}],"id":"proving-programs-don-t-halt","promptIds":["pr-ex6fs6zhqi","pr-5yxce08ept","pr-de7x7wtey4","pr-p5lutj6thk","pr-zja2bxgjix","pr-qkrvgen0-m","pr-vv1kkz6st9"]},{"title":[{"text":"Conclusion"}],"id":"conclusion","promptIds":["pr-l8gmes-csa"]},{"title":[{"text":"Endnotes"}],"id":"endnotes","promptIds":[]}]}},{"type":"lessonlink","children":[{"type":"h1","id":"5-goedel-s-first-incompleteness-theorem","children":[{"text":"5. Gödel’s first incompleteness theorem"}]},{"type":"p","children":[{"text":"Back in 1931, Kurt Gödel published his first mathematical mic-drop: “Our formal systems of logic can make statements that they can neither prove nor disprove.” In this chapter, you’ll learn what this famous theorem means, and you’ll learn a proof of it that builds upon Turing’s solution to the Halting Problem."}]}],"lesson":{"id":"H7XOvXvC_x","slug":["busy-beavers","incompleteness"],"plaintextTitle":"Gödel’s first incompleteness theorem","docVersionType":"published","sections":[{"title":[{"text":"Gödel’s first incompleteness theorem"}],"id":"goedel-s-first-incompleteness-theorem","promptIds":[]},{"title":[{"text":"An interactive tutorial"}],"id":"an-interactive-tutorial","promptIds":["pr-lo2wB07yq3"]},{"title":[{"text":"What is a formal system? 🤵"}],"id":"what-is-a-formal-system","promptIds":["pr-PXcWIg-yWb","pr-wG0HafYvWn","pr-YwO9MLGwG8","pr-O0eXG3iLZb"]},{"title":[{"text":"Enumerating theorems ... 🔢"}],"id":"enumerating-theorems-1234","promptIds":["pr-r6FsNuKrqA","pr-btUSPwY_eN","pr-UbeXwRTmto"]},{"title":[{"text":"Does "},{"type":"inlinecode","children":[{"text":"theorems()"}]},{"text":" do what it says on the tin? 🥫"}],"id":"does-theorems-do-what-it-says-on-the-tin","promptIds":["pr-TZaZCzSakq","pr-C4HniZw82O","pr-ZBBORLTx-s","pr--BLQSz0jrg"]},{"title":[{"text":"Statements about programs! 👩‍💻"}],"id":"statements-about-programs","promptIds":["pr-UxPQRS-0nJ","pr-1yLX9JWXp1"]},{"title":[{"text":"Theorem mining — better than crypto?"}],"id":"theorem-mining-better-than-crypto","promptIds":["pr-s09KgNpUw2","pr-k9xoym0KXX","pr-bOwqC8tvmD","pr-bi0Erwim75"]},{"title":[{"text":"Consistency 👎👍"}],"id":"consistency","promptIds":["pr-oFxPwW-3NU","pr-Anm-v3p-E_","pr-7UgUKxVWjv"]},{"title":[{"text":"Completeness"}],"id":"completeness","promptIds":["pr-rg_gR36DIZ","pr-9Qnbi1bWV8"]},{"title":[{"text":"A proof using Turing’s theorem"}],"id":"a-proof-using-turing-s-theorem","promptIds":["pr-0SYVvh63uT","pr-puBPdsiIyA"]},{"title":[{"text":"What about other formal systems?"}],"id":"what-about-other-formal-systems","promptIds":[]},{"title":[{"text":"Conclusion"}],"id":"conclusion","promptIds":["pr-gO9xwgsQNU"]}]}},{"type":"lessonlink","children":[{"type":"h1","id":"6-godel-s-second-incompleteness-theorem","children":[{"text":"6. Godel’s second incompleteness theorem"}]},{"type":"p","children":[{"text":"Not satisfied with one bombshell, Kurt quickly arrived at a second. So what if there are things our systems can’t prove? Perhaps those things are unimportant anyway. Well, Kurt’s second theorem finds a very important thing that these systems can’t prove: their own consistency!"}]},{"type":"p","children":[{"text":"In this chapter, we will learn why our systems, if they are consistent, cannot prove their own consistency. This builds neatly on top of the first theorem."}]}],"lesson":null},{"type":"lessonlink","children":[{"type":"h1","id":"7-rice-s-theorem","children":[{"text":"7. Rice’s theorem"}]},{"type":"p","children":[{"text":"Your coworker’s function "},{"type":"inlinecode","children":[{"text":"is_ip_address"}]},{"text":" could be replaced by a regular expression. Perhaps your IDE could recommend when a function can be replaced by a regex? Unfortunately, Henry Rice showed in 1951 that this check, along with many others like it, is impossible. Let’s follow the proof."}]}],"lesson":{"id":"L-kx5ozDTpEU","slug":["busy-beavers","rice"],"plaintextTitle":"Rice’s theorem","docVersionType":"published","sections":[{"title":[{"text":"Rice’s theorem"}],"id":"rice-s-theorem","promptIds":[]},{"title":[{"text":"An interactive tutorial"}],"id":"an-interactive-tutorial","promptIds":["pr-FR3Y7GBXaM","pr-P5_j0yoGp4","pr-LqkhhdqBjK"]},{"title":[{"text":"Warm-up: "},{"type":"inlinecode","children":[{"text":"canBeRegex"}]},{"text":""}],"id":"warm-up-can-be-regex","promptIds":["pr-_R1hkhQJsw","pr-JHEjDLW0Rt","pr-vrtG_yr4bH","pr-jQt8j9UoBr"]},{"title":[{"text":"That old halting problem again"}],"id":"that-old-halting-problem-again","promptIds":["pr-taL-T4xB7r","pr-es1QpxjfLK","pr-dTIcnerANM","pr-0EUVIqtP27"]},{"title":[{"text":"Code isolation"}],"id":"code-isolation","promptIds":["pr-7bjr0rlt--","pr-RqyZhQR3_N"]},{"title":[{"text":""},{"type":"inlinecode","children":[{"text":"canHalt"}]},{"text":": maybe an easier question?"}],"id":"can-halt-maybe-an-easier-question","promptIds":["pr-rAFRxXjypg","pr-qHJlUGF364","pr-051OGpHsLi"]},{"title":[{"text":"Final boss: "},{"type":"inlinecode","children":[{"text":"numHaltsIsEven"}]},{"text":""}],"id":"final-boss-num-halts-is-even","promptIds":["pr-tV1xURTrdc","pr-3p4h25JzLu","pr-RkY873FFkR","pr-BrzsBw2SuS","pr-PYGx3xXqXo"]},{"title":[{"text":"Now for an any property "},{"type":"inlinemath","htmlOrError":"\u003cspan class=\"katex\"\u003e\u003cspan class=\"katex-html\" aria-hidden=\"true\"\u003e\u003cspan class=\"base\"\u003e\u003cspan class=\"strut\" style=\"height:0.6833em;\"\u003e\u003c/span\u003e\u003cspan class=\"mord mathnormal\" style=\"margin-right:0.13889em;\"\u003eP\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e"},{"text":""}],"id":"now-for-an-any-property-p","promptIds":["pr-rrzXa-FbDM","pr-AzcWH_3W8P"]},{"title":[{"text":"Too many variables"}],"id":"too-many-variables","promptIds":["pr-4YEusa7i_h","pr-pWKKnvn8nZ","pr-01k_721zz5","pr-gYUxzze-44"]},{"title":[{"text":"Solving the halting problem is trivial?!"}],"id":"solving-the-halting-problem-is-trivial","promptIds":["pr-KYQ8VpKmTe","pr-rZriuogKRw","pr-l1zJOH9qLc"]},{"title":[{"text":"Conclusion"}],"id":"conclusion","promptIds":["pr-gO9xwgsQNU"]}]}},{"type":"lessonlink","children":[{"type":"h1","id":"8-just-how-busy-can-a-busy-beaver-be","children":[{"text":"8. Just how busy can a busy beaver be?"}]},{"type":"p","children":[{"text":"Let’s play a game! We’ll write a JavaScript program of less than 10 characters that prints as much as possible before halting. Whoever’s program prints more is the busiest beaver, and they win the game."}]},{"type":"p","children":[{"text":"What’s the busiest program? Just how busy is it? How can we find it? In this chapter, we’ll have a crack at these questions, but fair warning: we might not get many answers."}]}],"lesson":null},{"type":"lessonlink","children":[{"type":"h1","id":"9-quines-and-fixed-points","children":[{"text":"9. Quines and fixed points"}]},{"type":"p","children":[{"text":"Your DNA is a program that, when executed by a messy chemical computer (you!), spits out copies of itself. Are there JavaScript programs that perform the same trick when executed by "},{"type":"inlinecode","children":[{"text":"node"}]},{"text":"? What about Python? In this chapter, we’ll discover what a language needs in order to allow for self-replication."}]}],"lesson":null},{"type":"p","children":[{"text":"One more chapter to be announced. Watch this space.","italic":true}]},{"type":"buy","children":[{"text":"$19 is less than a Norwegian beaver pays for two pints!"}]},{"type":"h2","id":"who-am-i","children":[{"text":"Who am I?"}]},{"type":"p","children":[{"text":"I’m Jim. I studied computer science at Imperial College. I also have ten years of experience in the software industry — enough to know that you’ll probably never need any of this computability theory to make cool stuff, but you "},{"text":"might","italic":true},{"text":" need it to impress your friends."}]},{"type":"p","children":[{"text":""},{"type":"link","children":[{"text":"I also write at jameshfisher.com."}],"href":"https://jameshfisher.com/"},{"text":" You might know me from some "},{"type":"link","children":[{"text":"phishing"}],"href":"https://news.ycombinator.com/item?id=16781959"},{"text":" "},{"type":"link","children":[{"text":"techniques"}],"href":"https://news.ycombinator.com/item?id=19768072"},{"text":" I "},{"type":"link","children":[{"text":"discovered"}],"href":"https://jameshfisher.com/2020/08/06/smear-phishing-how-to-scam-an-android-user/"},{"text":". I also happen to be the creator of "},{"type":"link","children":[{"text":"TigYog"}],"href":"https://tigyog.app"},{"text":", the app that this course is built with."}]},{"type":"h2","id":"what-people-are-saying","children":[{"text":"What people are saying ..."}]},{"type":"p","children":[{"text":"Over 30K learners have completed chapters in "},{"text":"Busy Beavers","italic":true},{"text":". Here are some things that they’ve said about it."}]},{"type":"callout","children":[{"type":"p","children":[{"text":"⭐⭐⭐⭐⭐ “Probably the best intro to computability theory I’ve ever seen.” "},{"text":"— David Brumley, ","italic":true},{"type":"link","children":[{"text":"professor at Carnegie Mellon","italic":true}],"href":"https://users.ece.cmu.edu/~dbrumley/"},{"text":" and ","italic":true},{"type":"link","children":[{"text":"ForAllSecure CEO","italic":true}],"href":"https://forallsecure.com/"},{"text":".","italic":true}]}]},{"type":"callout","children":[{"type":"p","children":[{"text":"⭐⭐⭐⭐⭐ “A great, accessible way to introduce Lean to my students!” — "},{"type":"link","children":[{"text":"Tyler Josephson","italic":true}],"href":"https://twitter.com/trjosephson"},{"text":", chemical engineering professor at ","italic":true},{"type":"link","children":[{"text":"UMBC","italic":true}],"href":"https://cbee.umbc.edu/"},{"text":".","italic":true}]}]},{"type":"callout","children":[{"type":"p","children":[{"text":"⭐⭐⭐⭐⭐ “Your "},{"text":"Busy Beavers","italic":true},{"text":" course reminds me of how it felt to read a book when I was a kid. You’ve taken theory that’s usually packed in a scary thick textbook, and turned it into a book that children could read. Awesome work!” — "},{"text":"Reviewer by email.","italic":true}]}]},{"type":"callout","children":[{"type":"p","children":[{"text":"⭐⭐⭐⭐⭐ “This was very satisfying. The format works well, and makes sure you as reader are doing at least a minimum amount of thinking about the topics being presented. Even the pops and dings (if you have sound on) are fun 🙂” — "},{"type":"link","children":[{"text":"Reviewer on HN","italic":true}],"href":"https://news.ycombinator.com/item?id=33743418"},{"text":".","italic":true}]}]},{"type":"callout","children":[{"type":"p","children":[{"text":"⭐⭐⭐⭐⭐ “Absolutely fascinating and a lot of fun!”"},{"text":" — John George, Senior DevOps engineer, by email.","italic":true}]}]},{"type":"callout","children":[{"type":"p","children":[{"text":"⭐⭐⭐⭐⭐ “Thanks for your hard work and attention to detail; this entire series has been delightful.”"},{"text":" — ","italic":true},{"type":"link","children":[{"text":"Reviewer on Lobste.rs","italic":true}],"href":"https://lobste.rs/s/yequwk/proofs_about_programs_interactive"},{"text":".","italic":true}]}]},{"type":"h2","id":"glossary-of-unused-words","children":[{"text":"Glossary of unused words 📖"}]},{"type":"p","children":[{"text":"Standard writing on computability theory has its own weird vocabulary. I try to avoid using it, and instead use modern developer vocabulary. Here are some examples of weird words you won’t see much of in this course.","italic":true}]},{"type":"p","children":[{"bold":true,"text":"Decidable"},{"text":", "},{"text":"adj","italic":true},{"text":". If you can write "},{"type":"inlinecode","children":[{"text":"isMember"}]},{"text":" that returns whether a value is a member of a set, then the set is "},{"bold":true,"text":"decidable,"},{"text":" or "},{"bold":true,"text":"recursive,"},{"text":" or "},{"bold":true,"text":"computable."}]},{"type":"p","children":[{"bold":true,"text":"Diverge"},{"text":", "},{"text":"v","italic":true},{"text":". To run forever; to never return or exit. (Can also include throwing an exception.)"}]},{"type":"p","children":[{"bold":true,"text":"Function"},{"text":", "},{"text":"n","italic":true},{"text":". An abstract mapping from one set to another, e.g. “the function that maps programs to whether they halt or not”. "},{"text":"Not","italic":true},{"text":" the same as what developers call a "},{"type":"inlinecode","children":[{"text":"function"}]},{"text":", which mathematicatians would call an “algorithm” or “procedure.”"}]},{"type":"buy","children":[{"text":"Giveaway, "},{"text":"n","italic":true},{"text":". A surprisingly cheap item; excellent value for money."}]},{"type":"p","children":[{"bold":true,"text":"Gödel number"},{"text":", "},{"text":"n","italic":true},{"text":". A number that uniquely identifies a program. Nowadays we identify programs by their "},{"text":"source code","italic":true},{"text":" instead, and we have no need to assign numbers to programs."}]},{"type":"p","children":[{"bold":true,"text":"Language"},{"text":", "},{"text":"n","italic":true},{"text":". A set of strings, e.g. "},{"type":"inlinecode","children":[{"text":"[\"foo\", \"bar\"]"}]},{"text":", or all strings that only use the character "},{"type":"inlinecode","children":[{"text":"\"a\""}]},{"text":"."}]},{"type":"p","children":[{"bold":true,"text":"Partial"},{"text":", "},{"text":"adj","italic":true},{"text":". Undefined on some inputs."}]},{"type":"p","children":[{"bold":true,"text":"Recursive"},{"text":", "},{"text":"adj","italic":true},{"text":". See "},{"bold":true,"text":"decidable."},{"text":" "},{"text":"Not","italic":true},{"text":" the same as what developers call “recursive”, which is a function that calls itself."}]},{"type":"p","children":[{"bold":true,"text":"Recursively enumerable"},{"text":", "},{"text":"adj","italic":true},{"text":". If you can write "},{"type":"inlinecode","children":[{"text":"listMembers"}]},{"text":" that prints out all members of a set, then the set is recursively enumerable."}]},{"type":"p","children":[{"bold":true,"text":"Semantics"},{"text":", "},{"text":"n","italic":true},{"text":". Generally means “the input-output behavior of the code.”"}]}]},"id":"fr9uub3hqgab","slug":["busy-beavers","the-halting-problem"],"author":{"id":"ac-jw38s7hchupg","avatarKey":"bf90c3a21a9498fd7071f4b1f3b667c6618fa2861ad49ebf2d15bda533f72023.jpeg","name":"Jim Fisher"},"plaintextTitle":"The halting problem","plaintextDescription":"Perhaps your code editor has warned you before: “Unreachable code detected!” But how does it know? And will it warn you about all lines that are unreachable? Back in 1936, before computers really existed, Alan Turing was already thinking about this problem. In this chapter, you’ll learn the most important result in computability theory: Turing’s trick to troll any termination test!","sections":[{"title":[{"text":"The halting problem"}],"id":"the-halting-problem","promptIds":[]},{"title":[{"text":"An interactive tutorial"}],"id":"an-interactive-tutorial","promptIds":["pr-sraw3zkm1qsk"]},{"title":[{"text":"What is ‘halting’?"}],"id":"what-is-halting","promptIds":["pr-r6djuvhoew07","pr-h7e4aqmip86h"]},{"title":[{"text":"The "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":" function"}],"id":"the-halts-function","promptIds":["pr-2HJaiGEdb0"]},{"title":[{"text":"Implementing "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":""}],"id":"implementing-halts","promptIds":["pr-PSbnVE54M7","pr-fqWd9IWCAP","pr-IP7eTLHhYF"]},{"title":[{"text":"Paradoxical self-reference"}],"id":"paradoxical-self-reference","promptIds":["pr-x9q26hISZD","pr-Ijzz6tHb9a"]},{"title":[{"text":"The "},{"type":"inlinecode","children":[{"text":"haltsOn"}]},{"text":" function"}],"id":"the-halts-on-function","promptIds":["pr-odeOO5NqZO","pr-b6htfzz0s19u"]},{"title":[{"text":"Self-reflecting functions 🪞"}],"id":"self-reflecting-functions","promptIds":["pr-umygYmgYCh","pr-MGt81gc7Id","pr-92SJz8SSu7"]},{"title":[{"text":"Turing’s "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" function 👺"}],"id":"turing-s-troll-function","promptIds":["pr-o9tq8m2jezp3","pr-k8k2xk1m15mj"]},{"title":[{"text":"Trolling the "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" 👺🪞"}],"id":"trolling-the-troll","promptIds":[]},{"title":[{"text":"If the "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" halts on its own code ..."}],"id":"if-the-troll-halts-on-its-own-code","promptIds":["pr-02tuo110jfi8","pr-5aygghu1zao9"]},{"title":[{"text":"If the "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" does not halt on its own code ..."}],"id":"if-the-troll-does-not-halt-on-its-own-code","promptIds":["pr-zkax6xivmadi","pr-nCMxrUNepY"]},{"title":[{"text":"Equivalence of "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":" and "},{"type":"inlinecode","children":[{"text":"haltsOn"}]},{"text":""}],"id":"equivalence-of-halts-and-halts-on","promptIds":["pr-pbelcdi0c3sm","pr-rp9PwWaWsO"]},{"title":[{"text":"Can we patch the bug? 🐛"}],"id":"can-we-patch-the-bug","promptIds":["pr-90LNbAKSz0"]},{"title":[{"text":"Conclusion"}],"id":"conclusion","promptIds":["pr-si562wjwp7tq"]}],"children":[{"type":"h1","id":"the-halting-problem","children":[{"text":"The halting problem"}]},{"type":"h2","id":"an-interactive-tutorial","children":[{"text":"An interactive tutorial"}]},{"type":"p","children":[{"text":"Perhaps your code editor has warned you before: “Unreachable code detected!” But how does it know? And will it warn you about "},{"text":"all","italic":true},{"text":" lines that are unreachable? Back in 1936, before computers really existed, Alan Turing was already thinking about this problem. In this chapter, you’ll learn the most important result in computability theory: Turing’s trick to troll any termination test!"}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Okay, no more halting, let’s go!"}],"id":"op-md149zhwo259","correct":false},{"text":""}],"id":"pr-sraw3zkm1qsk"},{"type":"h2","id":"what-is-halting","children":[{"text":"What is ‘halting’?"}]},{"type":"p","children":[{"text":"In this lesson, we’ll write programs in JavaScript. Here are three programs. Which one never halts, i.e. never prints "},{"type":"inlinecode","children":[{"text":"\"done\""}]},{"text":"?"}]},{"type":"blockcode","html":"\u003cspan class=\"pl-c\"\u003e// Program A\u003c/span\u003e\n\u003cspan class=\"pl-c1\"\u003econsole\u003c/span\u003e.\u003cspan class=\"pl-c1\"\u003elog\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e'\u003c/span\u003edone\u003cspan class=\"pl-pds\"\u003e'\u003c/span\u003e\u003c/span\u003e);"},{"type":"blockcode","html":"\u003cspan class=\"pl-c\"\u003e// Program B\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003elet\u003c/span\u003e \u003cspan class=\"pl-smi\"\u003es\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e'\u003c/span\u003ehi\u003cspan class=\"pl-pds\"\u003e'\u003c/span\u003e\u003c/span\u003e;\n\u003cspan class=\"pl-k\"\u003efor\u003c/span\u003e (\u003cspan class=\"pl-k\"\u003elet\u003c/span\u003e \u003cspan class=\"pl-smi\"\u003ei\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e0\u003c/span\u003e; \u003cspan class=\"pl-smi\"\u003ei\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e\u0026#x3C;\u003c/span\u003e \u003cspan class=\"pl-smi\"\u003es\u003c/span\u003e.\u003cspan class=\"pl-c1\"\u003elength\u003c/span\u003e; \u003cspan class=\"pl-smi\"\u003ei\u003c/span\u003e\u003cspan class=\"pl-k\"\u003e++\u003c/span\u003e) {\n  \u003cspan class=\"pl-smi\"\u003es\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-smi\"\u003es\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e+\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e'\u003c/span\u003e!\u003cspan class=\"pl-pds\"\u003e'\u003c/span\u003e\u003c/span\u003e;\n}\n\u003cspan class=\"pl-c1\"\u003econsole\u003c/span\u003e.\u003cspan class=\"pl-c1\"\u003elog\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e'\u003c/span\u003edone\u003cspan class=\"pl-pds\"\u003e'\u003c/span\u003e\u003c/span\u003e);"},{"type":"blockcode","html":"\u003cspan class=\"pl-c\"\u003e// Program C\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003elet\u003c/span\u003e \u003cspan class=\"pl-smi\"\u003es\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e'\u003c/span\u003ehi\u003cspan class=\"pl-pds\"\u003e'\u003c/span\u003e\u003c/span\u003e;\n\u003cspan class=\"pl-k\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"pl-smi\"\u003es\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e!==\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e''\u003c/span\u003e\u003c/span\u003e) { \u003cspan class=\"pl-smi\"\u003es\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e''\u003c/span\u003e\u003c/span\u003e; }\n\u003cspan class=\"pl-c1\"\u003econsole\u003c/span\u003e.\u003cspan class=\"pl-c1\"\u003elog\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e'\u003c/span\u003edone\u003cspan class=\"pl-pds\"\u003e'\u003c/span\u003e\u003c/span\u003e);"},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Program "},{"type":"inlinecode","children":[{"text":"A"}]},{"text":""}],"id":"op-dcpacup3r5g4","correct":false},{"text":""},{"type":"option","children":[{"text":"Program "},{"type":"inlinecode","children":[{"text":"B"}]},{"text":""}],"id":"op-5rtb8dmvk4l5","correct":true},{"text":""},{"type":"option","children":[{"text":"Program "},{"type":"inlinecode","children":[{"text":"C"}]},{"text":""}],"id":"op-iwy8e0tp75hl","correct":false},{"text":""}],"id":"pr-r6djuvhoew07"},{"type":"response","children":[{"type":"p","children":[{"text":"No, program A prints "},{"type":"inlinecode","children":[{"text":"'done'"}]},{"text":", then halts."}]},{"type":"p","children":[{"text":"The answer is actually program B: it loops forever adding exclamation marks to "},{"type":"inlinecode","children":[{"text":"s"}]},{"text":", starting with "},{"type":"inlinecode","children":[{"text":"s='hi'"}]},{"text":", then "},{"type":"inlinecode","children":[{"text":"s='hi!'"}]},{"text":", then "},{"type":"inlinecode","children":[{"text":"s='hi!!'"}]},{"text":", and so on. The loop variable "},{"type":"inlinecode","children":[{"text":"i"}]},{"text":" never catches up with the end of the string!"}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Okay"}],"id":"op-jk2q78ywafi7","correct":false},{"text":""}],"id":"pr-p78y35yl7say"}],"toPromptId":"pr-r6djuvhoew07","optionIds":["op-dcpacup3r5g4"]},{"type":"response","children":[{"type":"p","children":[{"text":"Right! Program B loops forever adding exclamation marks to "},{"type":"inlinecode","children":[{"text":"s"}]},{"text":"."}]}],"toPromptId":"pr-r6djuvhoew07","optionIds":["op-5rtb8dmvk4l5"]},{"type":"response","children":[{"type":"p","children":[{"text":"No, Program C does halt. It enters the "},{"type":"inlinecode","children":[{"text":"while"}]},{"text":" loop once, which sets "},{"type":"inlinecode","children":[{"text":"s"}]},{"text":" to the empty string, after which the test "},{"type":"inlinecode","children":[{"text":"s !== ''"}]},{"text":" fails, then the program halts."}]},{"type":"p","children":[{"text":"The answer is actually program B: it loops forever adding exclamation marks to "},{"type":"inlinecode","children":[{"text":"s"}]},{"text":", starting with "},{"type":"inlinecode","children":[{"text":"s='hi'"}]},{"text":", then "},{"type":"inlinecode","children":[{"text":"s='hi!'"}]},{"text":", then "},{"type":"inlinecode","children":[{"text":"s='hi!!'"}]},{"text":", and so on. The loop variable "},{"type":"inlinecode","children":[{"text":"i"}]},{"text":" never catches up with the end of the string!"}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Okay"}],"id":"op-qu7oxacs2azi","correct":false},{"text":""}],"id":"pr-5zji4ma5kwa0"}],"toPromptId":"pr-r6djuvhoew07","optionIds":["op-iwy8e0tp75hl"]},{"type":"p","children":[{"text":"So the last line of Program B will never be reached. But if you paste Program B into your code editor, you won’t get a warning saying “Unreachable code detected!” A while ago "},{"type":"link","children":[{"text":"someone offered $1000"}],"href":"https://news.ycombinator.com/item?id=376238"},{"text":" for a developer to fix this bug once and for all. What do you think — would you take the contract?"}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Yes!"}],"id":"op-wuak8n5kuiqf"},{"text":""},{"type":"option","children":[{"text":"No!"}],"id":"op-bhcjh1wlraia"},{"text":""}],"id":"pr-h7e4aqmip86h"},{"type":"response","children":[{"type":"p","children":[{"text":"Okay! In this chapter, you’ll learn whether that was a wise choice."}]}],"toPromptId":"pr-h7e4aqmip86h","optionIds":["op-bhcjh1wlraia"]},{"type":"response","children":[{"type":"p","children":[{"text":"Brave! In this chapter, you’ll learn whether that was a wise choice."}]}],"toPromptId":"pr-h7e4aqmip86h","optionIds":["op-wuak8n5kuiqf"]},{"type":"h2","id":"the-halts-function","children":[{"text":"The "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":" function"}]},{"type":"p","children":[{"text":"For your code editor to detect all unreachable code, it would need a function called "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":" that takes some code as input, and returns "},{"type":"inlinecode","children":[{"text":"true"}]},{"text":" or "},{"type":"inlinecode","children":[{"text":"false"}]},{"text":" to say whether it finishes running. More precisely, we want a JavaScript function like this:"}]},{"type":"blockcode","html":"\u003cspan class=\"pl-k\"\u003efunction\u003c/span\u003e \u003cspan class=\"pl-en\"\u003ehalts\u003c/span\u003e (\u003cspan class=\"pl-v\"\u003ecode\u003c/span\u003e\u003cspan class=\"pl-k\"\u003e:\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003estring\u003c/span\u003e) {\n  \u003cspan class=\"pl-c\"\u003e// Would the string `code` halt\u003c/span\u003e\n  \u003cspan class=\"pl-c\"\u003e// when evaluated as JavaScript?\u003c/span\u003e\n  \u003cspan class=\"pl-c\"\u003e// Insert clever analysis here!\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"pl-smi\"\u003ewouldHalt\u003c/span\u003e;\n}"},{"type":"p","children":[{"text":"Let’s write a test for "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":". What should the following do?"}]},{"type":"blockcode","html":"\u003cspan class=\"pl-en\"\u003ehalts\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e`\u003c/span\u003e\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  let i = 1;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  while (i !== 10) i += 2;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  console.log(i);\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e`\u003c/span\u003e\u003c/span\u003e)"},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":""},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":" should return "},{"type":"inlinecode","children":[{"text":"true"}]},{"text":""}],"id":"op-cQR0EGgETO","correct":false},{"text":""},{"type":"option","children":[{"text":""},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":" should return "},{"type":"inlinecode","children":[{"text":"false"}]},{"text":""}],"id":"op-QPhi6aw5zh","correct":true},{"text":""},{"type":"option","children":[{"text":""},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":" should loop forever"}],"id":"op-FutujnIYlY","correct":false},{"text":""}],"id":"pr-2HJaiGEdb0"},{"type":"response","children":[{"type":"p","children":[{"text":"No, it should actually return "},{"type":"inlinecode","children":[{"text":"false"}]},{"text":", because the following program loops forever:"}]},{"type":"blockcode","html":"\u003cspan class=\"pl-k\"\u003elet\u003c/span\u003e i \u003cspan class=\"pl-k\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e1\u003c/span\u003e;\n\u003cspan class=\"pl-k\"\u003ewhile\u003c/span\u003e (i \u003cspan class=\"pl-k\"\u003e!==\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e10\u003c/span\u003e) i \u003cspan class=\"pl-k\"\u003e+=\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e2\u003c/span\u003e;\n\u003cspan class=\"pl-en\"\u003econsole\u003c/span\u003e.\u003cspan class=\"pl-c1\"\u003elog\u003c/span\u003e(i);"},{"type":"p","children":[{"text":"(Notice that the values of "},{"type":"inlinecode","children":[{"text":"i"}]},{"text":" go "},{"type":"inlinecode","children":[{"text":"1"}]},{"text":", "},{"type":"inlinecode","children":[{"text":"3"}]},{"text":", "},{"type":"inlinecode","children":[{"text":"7"}]},{"text":", "},{"type":"inlinecode","children":[{"text":"9"}]},{"text":", "},{"type":"inlinecode","children":[{"text":"11"}]},{"text":", ... and never hit "},{"type":"inlinecode","children":[{"text":"10"}]},{"text":".)"}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Okay"}],"id":"op-e_BilUuymv"},{"text":""}],"id":"pr-L66Y312PfI"}],"toPromptId":"pr-2HJaiGEdb0","optionIds":["op-cQR0EGgETO"]},{"type":"response","children":[{"type":"p","children":[{"text":"Right! The program passed in never halts, because the values of "},{"type":"inlinecode","children":[{"text":"i"}]},{"text":" never hit "},{"type":"inlinecode","children":[{"text":"10"}]},{"text":", so "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":" returns "},{"type":"inlinecode","children":[{"text":"false"}]},{"text":"."}]}],"toPromptId":"pr-2HJaiGEdb0","optionIds":["op-QPhi6aw5zh"]},{"type":"response","children":[{"type":"p","children":[{"text":"No, not quite. Perhaps you were saying that the following program never halts:"}]},{"type":"blockcode","html":"\u003cspan class=\"pl-k\"\u003elet\u003c/span\u003e i \u003cspan class=\"pl-k\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e1\u003c/span\u003e;\n\u003cspan class=\"pl-k\"\u003ewhile\u003c/span\u003e (i \u003cspan class=\"pl-k\"\u003e!==\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e10\u003c/span\u003e) i \u003cspan class=\"pl-k\"\u003e+=\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e2\u003c/span\u003e;\n\u003cspan class=\"pl-en\"\u003econsole\u003c/span\u003e.\u003cspan class=\"pl-c1\"\u003elog\u003c/span\u003e(i);"},{"type":"p","children":[{"text":"If so, you’d be right! (Because the values of "},{"type":"inlinecode","children":[{"text":"i"}]},{"text":" go "},{"type":"inlinecode","children":[{"text":"1"}]},{"text":", "},{"type":"inlinecode","children":[{"text":"3"}]},{"text":", "},{"type":"inlinecode","children":[{"text":"7"}]},{"text":", "},{"type":"inlinecode","children":[{"text":"9"}]},{"text":", "},{"type":"inlinecode","children":[{"text":"11"}]},{"text":", ... and never hit "},{"type":"inlinecode","children":[{"text":"10"}]},{"text":".)"}]},{"type":"p","children":[{"text":"However, the "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":" function should "},{"bold":true,"text":"always"},{"text":" halt on every input. If the program passed in will halt, it should return "},{"type":"inlinecode","children":[{"text":"true"}]},{"text":", and if the program passed in would not halt, it should return "},{"type":"inlinecode","children":[{"text":"false"}]},{"text":"."}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Okay"}],"id":"op-mh1ZnEYLNG"},{"text":""}],"id":"pr-v9OCJAu2yH"}],"toPromptId":"pr-2HJaiGEdb0","optionIds":["op-FutujnIYlY"]},{"type":"h2","id":"implementing-halts","children":[{"text":"Implementing "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":""}]},{"type":"p","children":[{"text":"How would you implement "},{"type":"inlinecode","children":[{"text":"halts(code)"}]},{"text":"? You could first try to parse the "},{"type":"inlinecode","children":[{"text":"code"}]},{"text":" as JavaScript: if it’s not valid JavaScript, you can return "},{"type":"inlinecode","children":[{"text":"true"}]},{"text":" (it would immediately crash). Then if the program has no loops or recursion, you should return ... "}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":""},{"type":"inlinecode","children":[{"text":"true"}]},{"text":""}],"id":"op-9fG8puy835","correct":true},{"text":""},{"type":"option","children":[{"text":""},{"type":"inlinecode","children":[{"text":"false"}]},{"text":""}],"id":"op-nslj0U2_QL","correct":false},{"text":""}],"id":"pr-PSbnVE54M7"},{"type":"response","children":[{"type":"p","children":[{"text":"No, you should return "},{"type":"inlinecode","children":[{"text":"true"}]},{"text":", because a program without loops or recursion is a finite sequence of statements. If you find a way around this, email me!"}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Okay"}],"id":"op-0dfRrgQ55L"},{"text":""}],"id":"pr-xhmIONvZkq"}],"toPromptId":"pr-PSbnVE54M7","optionIds":["op-nslj0U2_QL"]},{"type":"p","children":[{"text":"And if the program starts with "},{"type":"inlinecode","children":[{"text":"while(true){}"}]},{"text":", you should return ..."}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":""},{"type":"inlinecode","children":[{"text":"true"}]},{"text":""}],"id":"op-qXOR7rxS_2","correct":false},{"text":""},{"type":"option","children":[{"text":""},{"type":"inlinecode","children":[{"text":"false"}]},{"text":""}],"id":"op-nsWLnvmJCZ","correct":true},{"text":""}],"id":"pr-fqWd9IWCAP"},{"type":"response","children":[{"type":"p","children":[{"text":"No, you should return "},{"type":"inlinecode","children":[{"text":"false"}]},{"text":", because "},{"type":"inlinecode","children":[{"text":"while(true){}"}]},{"text":" never halts, so the whole program will never halt."}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Okay"}],"id":"op-eR0yDUiCrP"},{"text":""}],"id":"pr-cD5_JwWqhD"}],"toPromptId":"pr-fqWd9IWCAP","optionIds":["op-qXOR7rxS_2"]},{"type":"p","children":[{"text":"You could even run the program for a while with "},{"type":"inlinecode","children":[{"text":"eval"}]},{"text":", and if it halts, then you can return "},{"type":"inlinecode","children":[{"text":"true"}]},{"text":". But is it enough to just do all the checks we can think of? What we really need is a single, unified way to check whether any program halts."}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Continue"}],"id":"op-3h8n_-rwVM"},{"text":""}],"id":"pr-IP7eTLHhYF"},{"type":"h2","id":"paradoxical-self-reference","children":[{"text":"Paradoxical self-reference"}]},{"type":"p","children":[{"text":"Alan Turing was thinking about this back in 1936, and came up with the surprising answer: whatever version of "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":" you write, it will always have a bug!"}]},{"type":"p","children":[{"text":"Here’s a strange starting point: consider the sentence "},{"text":"“this sentence is false”","italic":true},{"text":". Is that sentence true or false?"}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"It’s true!"}],"id":"op-ajFdqPPHoU"},{"text":""},{"type":"option","children":[{"text":"It’s false!"}],"id":"op-GMYTlTIRXD"},{"text":""},{"type":"option","children":[{"text":"It’s neither!"}],"id":"op-8XWWb6xUoR","correct":true},{"text":""}],"id":"pr-x9q26hISZD"},{"type":"response","children":[{"type":"p","children":[{"text":"Well, if “this sentence is false” is true, then you should believe what it says: it’s false! And vice versa. No, I think the most reasonable answer is that it’s neither true nor false."}]}],"toPromptId":"pr-x9q26hISZD","optionIds":["op-ajFdqPPHoU"]},{"type":"response","children":[{"type":"p","children":[{"text":"Well, if “this sentence is false” is false, then you should believe the opposite of what it says: that the sentence is true! And vice versa. No, I think the most reasonable answer is that it’s neither true nor false."}]}],"toPromptId":"pr-x9q26hISZD","optionIds":["op-GMYTlTIRXD"]},{"type":"response","children":[{"type":"p","children":[{"text":"I think so too!"}]}],"toPromptId":"pr-x9q26hISZD","optionIds":["op-8XWWb6xUoR"]},{"type":"p","children":[{"text":"It’s weird, isn’t it? This sentence is confusing because it’s able to refer to itself. There are many other paradoxes like this. The insight underlying Turing’s proof, and many other many interesting theorems, is that "},{"bold":true,"text":"self-reference often leads to weird paradoxes."}]},{"type":"p","children":[{"text":"There are hints of self-reference in the description of "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":": it’s a "},{"text":"program","italic":true},{"text":" that reasons about "},{"text":"programs","italic":true},{"text":". So Turing starts thinking ... what would "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":" say if we asked it whether "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":" halts?"}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Continue"}],"id":"op-ns_gDomp44"},{"text":""}],"id":"pr-Ijzz6tHb9a"},{"type":"h2","id":"the-halts-on-function","children":[{"text":"The "},{"type":"inlinecode","children":[{"text":"haltsOn"}]},{"text":" function"}]},{"type":"p","children":[{"text":"However, we can’t just ask whether "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":" halts. It’s a "},{"text":"function","italic":true},{"text":", so we must ask whether it halts "},{"text":"on a particular input","italic":true},{"text":". So we need to change the problem a bit: rather than seeking a function "},{"type":"inlinecode","children":[{"text":"halts(code)"}]},{"text":", we’re going to seek a function "},{"type":"inlinecode","children":[{"text":"haltsOn(funcStr, argStr)"}]},{"text":". It should tell us whether the function would halt when given a specific argument."}]},{"type":"p","children":[{"text":"Let’s write some tests for "},{"type":"inlinecode","children":[{"text":"haltsOn"}]},{"text":". Here’s one:"}]},{"type":"blockcode","html":"\u003cspan class=\"pl-k\"\u003econst\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003eisSmallNum\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e`\u003c/span\u003efunction (n) {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  return n \u0026#x3C; 3;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e}\u003cspan class=\"pl-pds\"\u003e`\u003c/span\u003e\u003c/span\u003e;\n\n\u003cspan class=\"pl-en\"\u003ehaltsOn\u003c/span\u003e(\u003cspan class=\"pl-smi\"\u003eisSmallNum\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e'\u003c/span\u003e2\u003cspan class=\"pl-pds\"\u003e'\u003c/span\u003e\u003c/span\u003e)"},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Wait, why is "},{"type":"inlinecode","children":[{"text":"'2'"}]},{"text":" a string?"}],"id":"op-6CBujZ2tZr"},{"text":""}],"id":"pr-odeOO5NqZO"},{"type":"p","children":[{"text":"I’m glad you asked! It’s for the same reason that "},{"type":"inlinecode","children":[{"text":"code"}]},{"text":" and "},{"type":"inlinecode","children":[{"text":"funcStr"}]},{"text":" are strings: we’re giving "},{"type":"inlinecode","children":[{"text":"haltsOn"}]},{"text":" raw source code access, so we pass it the JavaScript string representation of the argument."}]},{"type":"p","children":[{"text":"Anyway, I’ll give you this one for free: "},{"type":"inlinecode","children":[{"text":"haltsOn"}]},{"text":" should return "},{"type":"inlinecode","children":[{"text":"true"}]},{"text":", because the following program will halt:"}]},{"type":"blockcode","html":"\u003cspan class=\"pl-k\"\u003econst\u003c/span\u003e \u003cspan class=\"pl-en\"\u003ef\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-k\"\u003efunction\u003c/span\u003e (\u003cspan class=\"pl-v\"\u003en\u003c/span\u003e) {\n  \u003cspan class=\"pl-k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"pl-smi\"\u003en\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e\u0026#x3C;\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e3\u003c/span\u003e;\n};\n\u003cspan class=\"pl-en\"\u003ef\u003c/span\u003e(\u003cspan class=\"pl-c1\"\u003e2\u003c/span\u003e);"},{"type":"p","children":[{"text":"Now it’s your turn: what should the following program do?"}]},{"type":"blockcode","html":"\u003cspan class=\"pl-k\"\u003econst\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003efuncStr\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e`\u003c/span\u003efunction (s) {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  while (s === \"foo\") { }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e}\u003cspan class=\"pl-pds\"\u003e`\u003c/span\u003e\u003c/span\u003e;\n\n\u003cspan class=\"pl-en\"\u003ehaltsOn\u003c/span\u003e(\u003cspan class=\"pl-smi\"\u003efuncStr\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e'\u003c/span\u003e\"foo\"\u003cspan class=\"pl-pds\"\u003e'\u003c/span\u003e\u003c/span\u003e)"},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Should return "},{"type":"inlinecode","children":[{"text":"true"}]},{"text":""}],"id":"op-6bgsam79ytz5","correct":false},{"text":""},{"type":"option","children":[{"text":"Should return "},{"type":"inlinecode","children":[{"text":"false"}]},{"text":""}],"id":"op-io4hpu9bhftg","correct":true},{"text":""},{"type":"option","children":[{"text":"Should loop forever"}],"id":"op-npsjv4lxpjru","correct":false},{"text":""}],"id":"pr-b6htfzz0s19u"},{"type":"response","children":[{"type":"p","children":[{"text":"Indeed, the following program will never halt, so "},{"type":"inlinecode","children":[{"text":"haltsOn"}]},{"text":" should return "},{"type":"inlinecode","children":[{"text":"false"}]},{"text":":"}]},{"type":"blockcode","html":"\u003cspan class=\"pl-k\"\u003econst\u003c/span\u003e \u003cspan class=\"pl-en\"\u003ef\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-k\"\u003efunction\u003c/span\u003e (\u003cspan class=\"pl-v\"\u003es\u003c/span\u003e) {\n  \u003cspan class=\"pl-k\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"pl-smi\"\u003es\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e===\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003efoo\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e) { }\n};\n\u003cspan class=\"pl-en\"\u003ef\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003efoo\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e);"}],"toPromptId":"pr-b6htfzz0s19u","optionIds":["op-io4hpu9bhftg"]},{"type":"response","children":[{"type":"p","children":[{"text":"No, "},{"type":"inlinecode","children":[{"text":"haltsOn"}]},{"text":" should actually return "},{"type":"inlinecode","children":[{"text":"false"}]},{"text":", because the following program never halts:"}]},{"type":"blockcode","html":"\u003cspan class=\"pl-k\"\u003econst\u003c/span\u003e \u003cspan class=\"pl-en\"\u003ef\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-k\"\u003efunction\u003c/span\u003e (\u003cspan class=\"pl-v\"\u003es\u003c/span\u003e) {\n  \u003cspan class=\"pl-k\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"pl-smi\"\u003es\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e===\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003efoo\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e) { }\n};\n\u003cspan class=\"pl-en\"\u003ef\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003efoo\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e);"},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Okay"}],"id":"op-lffwubhdqdib","correct":false},{"text":""}],"id":"pr-gy8lbtjy5h5x"}],"toPromptId":"pr-b6htfzz0s19u","optionIds":["op-6bgsam79ytz5"]},{"type":"response","children":[{"type":"p","children":[{"text":"No: "},{"type":"inlinecode","children":[{"text":"haltsOn"}]},{"text":" should "},{"bold":true,"text":"always"},{"text":" halt, returning either "},{"type":"inlinecode","children":[{"text":"true"}]},{"text":" or "},{"type":"inlinecode","children":[{"text":"false"}]},{"text":". In this case, the program it’s analyzing is:"}]},{"type":"blockcode","html":"\u003cspan class=\"pl-k\"\u003econst\u003c/span\u003e \u003cspan class=\"pl-en\"\u003ef\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-k\"\u003efunction\u003c/span\u003e (\u003cspan class=\"pl-v\"\u003es\u003c/span\u003e) {\n  \u003cspan class=\"pl-k\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"pl-smi\"\u003es\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e===\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003efoo\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e) { }\n};\n\u003cspan class=\"pl-en\"\u003ef\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003efoo\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e);"},{"type":"p","children":[{"text":"This program does not halt, so "},{"type":"inlinecode","children":[{"text":"haltsOn"}]},{"text":" should return "},{"type":"inlinecode","children":[{"text":"false"}]},{"text":"."}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Okay"}],"id":"op-a6gv0fe8h5tq","correct":false},{"text":""}],"id":"pr-0hb5qjvey2th"}],"toPromptId":"pr-b6htfzz0s19u","optionIds":["op-npsjv4lxpjru"]},{"type":"h2","id":"self-reflecting-functions","children":[{"text":"Self-reflecting functions 🪞"}]},{"type":"p","children":[{"text":"Anyway, Turing was thinking about "},{"text":"functions that can look at their own source code.","italic":true},{"text":" Here’s an innocent function that, given a string, extracts the first number in it:"}]},{"type":"blockcode","html":"\u003cspan class=\"pl-k\"\u003efunction\u003c/span\u003e \u003cspan class=\"pl-en\"\u003efirstNumberIn\u003c/span\u003e(\u003cspan class=\"pl-v\"\u003estr\u003c/span\u003e\u003cspan class=\"pl-k\"\u003e:\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003estring\u003c/span\u003e) {\n  \u003cspan class=\"pl-k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-sr\"\u003e \u003cspan class=\"pl-pds\"\u003e/\u003c/span\u003ed\u003cspan class=\"pl-k\"\u003e+\u003c/span\u003e\u003cspan class=\"pl-pds\"\u003e/\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e.\u003cspan class=\"pl-c1\"\u003eexec\u003c/span\u003e(\u003cspan class=\"pl-smi\"\u003estr\u003c/span\u003e)[\u003cspan class=\"pl-c1\"\u003e0\u003c/span\u003e];\n}"},{"type":"p","children":[{"text":"For example, "},{"type":"inlinecode","children":[{"text":"firstNumberIn(\"testing 1 2 3\")"}]},{"text":" would return "},{"type":"inlinecode","children":[{"text":"\"1\""}]},{"text":". But what would "},{"type":"inlinecode","children":[{"text":"firstNumberIn"}]},{"text":" return when given "},{"text":"its own source code","italic":true},{"text":"?"}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":""},{"type":"inlinecode","children":[{"text":"1"}]},{"text":""}],"id":"op-AtSWAqGSRY","correct":false},{"text":""},{"type":"option","children":[{"text":""},{"type":"inlinecode","children":[{"text":"0"}]},{"text":""}],"id":"op-R-b7hlLSL2","correct":false},{"text":""},{"type":"option","children":[{"text":""},{"type":"inlinecode","children":[{"text":"\"0\""}]},{"text":""}],"id":"op-RQvzqrberN","correct":true},{"text":""},{"type":"option","children":[{"text":"It would not halt"}],"id":"op-sDiBXkF8P0","correct":false},{"text":""}],"id":"pr-umygYmgYCh"},{"type":"p","children":[{"text":"Similarly, we can ask whether functions will halt when given their own source code. Try this one out:"}]},{"type":"blockcode","html":"\u003cspan class=\"pl-k\"\u003efunction\u003c/span\u003e (\u003cspan class=\"pl-v\"\u003es\u003c/span\u003e) {\n  \u003cspan class=\"pl-k\"\u003eif\u003c/span\u003e (\u003cspan class=\"pl-smi\"\u003es\u003c/span\u003e.\u003cspan class=\"pl-en\"\u003eincludes\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003efroot\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e)) {\n    \u003cspan class=\"pl-k\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"pl-c1\"\u003etrue\u003c/span\u003e);\n  }\n}"},{"type":"p","children":[{"text":"What does this function do when given its own source code?"}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"It halts"}],"id":"op-U9UQfruKBL","correct":false},{"text":""},{"type":"option","children":[{"text":"It loops forever"}],"id":"op-7xsXVPyAmZ","correct":true},{"text":""}],"id":"pr-MGt81gc7Id"},{"type":"response","children":[{"type":"p","children":[{"text":"It actually loops forever. This strange function checks whether its input contains the string "},{"type":"inlinecode","children":[{"text":"\"froot\""}]},{"text":", and if so, it loops forever. Now check the function’s source code: it contains the string "},{"type":"inlinecode","children":[{"text":"\"froot\""}]},{"text":" in the second line. So this function would loop when given its own source code!"}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Okay"}],"id":"op-WJlNUTO-GL"},{"text":""}],"id":"pr-dS7WyTLnt7"}],"toPromptId":"pr-MGt81gc7Id","optionIds":["op-U9UQfruKBL"]},{"type":"p","children":[{"text":"(You could actually replace "},{"type":"inlinecode","children":[{"text":"\"froot\""}]},{"text":" with any other string, and it would still loop when given its own source code. That should be a hint that things are getting weird.)"}]},{"type":"p","children":[{"text":"But we don’t have to analyze this ourselves: we can just ask "},{"type":"inlinecode","children":[{"text":"haltsOn"}]},{"text":"! Here’s how:"}]},{"type":"blockcode","html":"\u003cspan class=\"pl-k\"\u003efunction\u003c/span\u003e \u003cspan class=\"pl-en\"\u003ehaltsOnSelf\u003c/span\u003e(\u003cspan class=\"pl-v\"\u003efuncStr\u003c/span\u003e\u003cspan class=\"pl-k\"\u003e:\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003estring\u003c/span\u003e) {\n  \u003cspan class=\"pl-k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"pl-en\"\u003ehaltsOn\u003c/span\u003e(\n    \u003cspan class=\"pl-smi\"\u003efuncStr\u003c/span\u003e,\n    \u003cspan class=\"pl-c1\"\u003eJSON\u003c/span\u003e.\u003cspan class=\"pl-c1\"\u003estringify\u003c/span\u003e(\u003cspan class=\"pl-smi\"\u003efuncStr\u003c/span\u003e)\n  );\n}"},{"type":"p","children":[{"text":"(Notice the "},{"type":"inlinecode","children":[{"text":"JSON.stringify"}]},{"text":". Without this, we would not be passing the source code to the function; we would be passing a literal function as the argument.)"}]},{"type":"p","children":[{"text":"Here’s an example:"}]},{"type":"blockcode","html":"\u003cspan class=\"pl-en\"\u003ehaltsOnSelf\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e`\u003c/span\u003efunction (s) {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  while (s.length \u003e 1000) { }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e}\u003cspan class=\"pl-pds\"\u003e`\u003c/span\u003e\u003c/span\u003e)"},{"type":"p","children":[{"text":"What should the above return?"}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Should return "},{"type":"inlinecode","children":[{"text":"true"}]},{"text":""}],"id":"op-g5DbLrJaOD","correct":true},{"text":""},{"type":"option","children":[{"text":"Should return "},{"type":"inlinecode","children":[{"text":"false"}]},{"text":""}],"id":"op-Sext4WTFCD","correct":false},{"text":""}],"id":"pr-92SJz8SSu7"},{"type":"response","children":[{"type":"p","children":[{"text":"Right! The function’s source code is much shorter than 1000 characters, so it never enters the loop."}]}],"toPromptId":"pr-92SJz8SSu7","optionIds":["op-g5DbLrJaOD"]},{"type":"response","children":[{"type":"p","children":[{"text":"No, it should return true. The function loops forever if its input string has more than 1000 characters. But its own source code is much shorter than that, so it halts immediately. Therefore, "},{"type":"inlinecode","children":[{"text":"haltsOnSelf"}]},{"text":" must return "},{"type":"inlinecode","children":[{"text":"true"}]},{"text":"."}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Okay"}],"id":"op-FXCVmuimd4"},{"text":""}],"id":"pr-cpVgo432n6"}],"toPromptId":"pr-92SJz8SSu7","optionIds":["op-Sext4WTFCD"]},{"type":"h2","id":"turing-s-troll-function","children":[{"text":"Turing’s "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" function 👺"}]},{"type":"p","children":[{"text":"This is getting very loopy, isn’t it? Stay strapped in, because there’s one more level of loopiness to come! Turing now defines a devilish function, "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":", which looks like this:"}]},{"type":"blockcode","html":"\u003cspan class=\"pl-k\"\u003efunction\u003c/span\u003e \u003cspan class=\"pl-en\"\u003etroll\u003c/span\u003e(\u003cspan class=\"pl-v\"\u003efuncStr\u003c/span\u003e\u003cspan class=\"pl-k\"\u003e:\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003estring\u003c/span\u003e) {\n  \u003cspan class=\"pl-k\"\u003eif\u003c/span\u003e (\u003cspan class=\"pl-en\"\u003ehaltsOnSelf\u003c/span\u003e(\u003cspan class=\"pl-smi\"\u003efuncStr\u003c/span\u003e)) {\n    \u003cspan class=\"pl-k\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"pl-c1\"\u003etrue\u003c/span\u003e) { }\n  }\n}"},{"type":"p","children":[{"text":"Turing’s "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" function looks "},{"text":"bizarre!","italic":true},{"text":" Given a "},{"type":"inlinecode","children":[{"text":"funcStr"}]},{"text":", it either halts or loops forever. To decide, the troll asks "},{"type":"inlinecode","children":[{"text":"haltsOnSelf"}]},{"text":" what the function would do when given its own source code, and then the troll does the opposite! That is, if "},{"type":"inlinecode","children":[{"text":"funcStr"}]},{"text":" would halt on its own source code, then "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" does not halt; but if "},{"type":"inlinecode","children":[{"text":"funcStr"}]},{"text":" would not halt on its own source code, then "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" halts."}]},{"type":"p","children":[{"text":"Let’s work through some examples. What will the following do?"}]},{"type":"blockcode","html":"\u003cspan class=\"pl-en\"\u003etroll\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e`\u003c/span\u003efunction (s) {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  return true;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e}\u003cspan class=\"pl-pds\"\u003e`\u003c/span\u003e\u003c/span\u003e)"},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":""},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" will halt"}],"id":"op-tpv303wk0jnl","correct":false},{"text":""},{"type":"option","children":[{"text":""},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" will loop forever"}],"id":"op-3og2w4fikc9r","correct":true},{"text":""}],"id":"pr-o9tq8m2jezp3"},{"type":"response","children":[{"type":"p","children":[{"text":"No, "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" actually would loop forever! It first consults "},{"type":"inlinecode","children":[{"text":"haltsOnSelf"}]},{"text":", which tells us whether this strange program halts:"}]},{"type":"blockcode","html":"\u003cspan class=\"pl-k\"\u003econst\u003c/span\u003e \u003cspan class=\"pl-en\"\u003ef\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-k\"\u003efunction\u003c/span\u003e (\u003cspan class=\"pl-v\"\u003es\u003c/span\u003e) {\n  \u003cspan class=\"pl-k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etrue\u003c/span\u003e;\n};\n\u003cspan class=\"pl-en\"\u003ef\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e`\u003c/span\u003efunction (s) {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  return true;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e}\u003cspan class=\"pl-pds\"\u003e`\u003c/span\u003e\u003c/span\u003e);"},{"type":"p","children":[{"text":"Try it for yourself: the above program halts. Because of this, "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" then goes into an infinite loop."}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Okay"}],"id":"op-6vdail01r40i","correct":false},{"text":""}],"id":"pr-3lczwuso0fjp"}],"toPromptId":"pr-o9tq8m2jezp3","optionIds":["op-tpv303wk0jnl"]},{"type":"response","children":[{"type":"p","children":[{"text":"Right! The program halts when run on its own source code, so "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" decides to loop forever."}]}],"toPromptId":"pr-o9tq8m2jezp3","optionIds":["op-3og2w4fikc9r"]},{"type":"p","children":[{"text":"Let’s try another one. What would the following do?"}]},{"type":"blockcode","html":"\u003cspan class=\"pl-en\"\u003etroll\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e`\u003c/span\u003efunction (s) {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  while (true) { }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e}\u003cspan class=\"pl-pds\"\u003e`\u003c/span\u003e\u003c/span\u003e)"},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":""},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" will halt"}],"id":"op-cxptir5gxr6f","correct":true},{"text":""},{"type":"option","children":[{"text":""},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" will loop forever"}],"id":"op-9i88a9cnp0kx","correct":false},{"text":""}],"id":"pr-k8k2xk1m15mj"},{"type":"response","children":[{"type":"p","children":[{"text":"Right: the function passed in loops forever, so "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" will halt."}]}],"toPromptId":"pr-k8k2xk1m15mj","optionIds":["op-cxptir5gxr6f"]},{"type":"response","children":[{"type":"p","children":[{"text":"No, "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" will actually halt, because the following program loops forever:"}]},{"type":"blockcode","html":"\u003cspan class=\"pl-k\"\u003econst\u003c/span\u003e \u003cspan class=\"pl-en\"\u003ef\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-k\"\u003efunction\u003c/span\u003e (\u003cspan class=\"pl-v\"\u003es\u003c/span\u003e) {\n  \u003cspan class=\"pl-k\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"pl-c1\"\u003etrue\u003c/span\u003e) { }\n};\n\u003cspan class=\"pl-en\"\u003ef\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e`\u003c/span\u003efunction (s) {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  while (true) { }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e}\u003cspan class=\"pl-pds\"\u003e`\u003c/span\u003e\u003c/span\u003e);"},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Okay"}],"id":"op-puztgvv80dg2","correct":false},{"text":""}],"id":"pr-51acmgr9b7i5"}],"toPromptId":"pr-k8k2xk1m15mj","optionIds":["op-9i88a9cnp0kx"]},{"type":"h2","id":"trolling-the-troll","children":[{"text":"Trolling the "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" 👺🪞"}]},{"type":"p","children":[{"text":"Now, the function "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":", like any other JavaScript value, can be encoded as a string:"}]},{"type":"blockcode","html":"\u003cspan class=\"pl-k\"\u003econst\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etrollStr\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e`\u003c/span\u003efunction (funcStr) {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  if (haltsOnSelf(funcStr)) {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    while (true) { }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e}\u003cspan class=\"pl-pds\"\u003e`\u003c/span\u003e\u003c/span\u003e;"},{"type":"p","children":[{"text":"Now comes Turing’s truly crazy thought: what happens when we call "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" on "},{"text":"its own source code","italic":true},{"text":"? That is, what happens if we run "},{"type":"inlinecode","children":[{"text":"troll(trollStr)"}]},{"text":"? Luckily, we can answer that: just run "},{"type":"inlinecode","children":[{"text":"haltsOnSelf(trollStr)"}]},{"text":"!"}]},{"type":"p","children":[{"text":"Now, "},{"type":"inlinecode","children":[{"text":"haltsOnSelf(trollStr)"}]},{"text":" is either "},{"type":"inlinecode","children":[{"text":"true"}]},{"text":" or "},{"type":"inlinecode","children":[{"text":"false"}]},{"text":". And it turns out that, in either case, we get a strange contradiction ..."}]},{"type":"h2","id":"if-the-troll-halts-on-its-own-code","children":[{"text":"If the "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" halts on its own code ..."}]},{"type":"p","children":[{"text":"Let’s first assume "},{"type":"inlinecode","children":[{"text":"haltsOnSelf(trollStr)"}]},{"text":" returns "},{"type":"inlinecode","children":[{"text":"true"}]},{"text":". Then what is "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":" claiming that "},{"type":"inlinecode","children":[{"text":"troll(trollStr)"}]},{"text":" will do?"}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"It claims "},{"type":"inlinecode","children":[{"text":"troll(trollStr)"}]},{"text":" would halt"}],"id":"op-o0m37smnhj33","correct":true},{"text":""},{"type":"option","children":[{"text":"It claims "},{"type":"inlinecode","children":[{"text":"troll(trollStr)"}]},{"text":" would loop forever"}],"id":"op-hej8ckeabf68","correct":false},{"text":""}],"id":"pr-02tuo110jfi8"},{"type":"response","children":[{"type":"p","children":[{"text":"Remember the meaning of "},{"type":"inlinecode","children":[{"text":"haltsOnSelf(funcStr)"}]},{"text":": it tells us whether the function would halt when given its own source code. So if "},{"type":"inlinecode","children":[{"text":"haltsOnSelf(trollStr)"}]},{"text":" returns true, it’s saying that "},{"type":"inlinecode","children":[{"text":"troll(trollStr)"}]},{"text":" halts."}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Okay"}],"id":"op-l47oiyffbh7s","correct":false},{"text":""}],"id":"pr-pq4drvihh4m2"}],"toPromptId":"pr-02tuo110jfi8","optionIds":["op-hej8ckeabf68"]},{"type":"p","children":[{"text":"Now read the definition of "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":": what would "},{"type":"inlinecode","children":[{"text":"troll(trollStr)"}]},{"text":" "},{"text":"actually","italic":true},{"text":" do?"}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":""},{"type":"inlinecode","children":[{"text":"troll(trollStr)"}]},{"text":" would halt"}],"id":"op-s8stty9r1wv5","correct":false},{"text":""},{"type":"option","children":[{"text":""},{"type":"inlinecode","children":[{"text":"troll(trollStr)"}]},{"text":" would loop forever"}],"id":"op-ieqxeom1rc31","correct":true},{"text":""}],"id":"pr-5aygghu1zao9"},{"type":"response","children":[{"type":"p","children":[{"text":"Actually, "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" would loop forever! The first thing "},{"type":"inlinecode","children":[{"text":"troll(trollStr)"}]},{"text":" does is query "},{"type":"inlinecode","children":[{"text":"haltsOnSelf(trollStr)"}]},{"text":". We’ve assumed that this returns "},{"type":"inlinecode","children":[{"text":"true"}]},{"text":". In this case, "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" maliciously loops forever!"}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Okay"}],"id":"op-xd2jsxvrweat","correct":false},{"text":""}],"id":"pr-nbekcsk9urcb"}],"toPromptId":"pr-5aygghu1zao9","optionIds":["op-s8stty9r1wv5"]},{"type":"p","children":[{"text":"So if "},{"type":"inlinecode","children":[{"text":"haltsOnSelf(trollStr)"}]},{"text":" returns "},{"type":"inlinecode","children":[{"text":"true"}]},{"text":", it would be wrong!"}]},{"type":"h2","id":"if-the-troll-does-not-halt-on-its-own-code","children":[{"text":"If the "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" does not halt on its own code ..."}]},{"type":"p","children":[{"text":"Not so bad perhaps: surely "},{"type":"inlinecode","children":[{"text":"haltsOnSelf(trollStr)"}]},{"text":" must return "},{"type":"inlinecode","children":[{"text":"false"}]},{"text":", then?"}]},{"type":"p","children":[{"text":"Let’s try it. Now assume "},{"type":"inlinecode","children":[{"text":"haltsOnSelf(trollStr)"}]},{"text":" returns "},{"type":"inlinecode","children":[{"text":"false"}]},{"text":". Then "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":" is claiming that "},{"type":"inlinecode","children":[{"text":"troll(trollStr)"}]},{"text":" will not halt."}]},{"type":"p","children":[{"text":"But now read the definition of "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":": if "},{"type":"inlinecode","children":[{"text":"haltsOnSelf(trollStr)"}]},{"text":" returns "},{"type":"inlinecode","children":[{"text":"false"}]},{"text":", what would "},{"type":"inlinecode","children":[{"text":"troll(trollStr)"}]},{"text":" "},{"text":"actually","italic":true},{"text":" do?"}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":""},{"type":"inlinecode","children":[{"text":"troll(trollStr)"}]},{"text":" would halt"}],"id":"op-e2tcpllufq9p","correct":true},{"text":""},{"type":"option","children":[{"text":""},{"type":"inlinecode","children":[{"text":"troll(trollStr)"}]},{"text":" would loop forever"}],"id":"op-sr2yqorqolqs","correct":false},{"text":""}],"id":"pr-zkax6xivmadi"},{"type":"response","children":[{"type":"p","children":[{"text":"Actually, it would halt. The first thing "},{"type":"inlinecode","children":[{"text":"troll(trollStr)"}]},{"text":" does is query "},{"type":"inlinecode","children":[{"text":"haltsOnSelf(trollStr)"}]},{"text":". We’ve assumed that this returns "},{"type":"inlinecode","children":[{"text":"false"}]},{"text":". In this case, "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" maliciously halts instead of looping forever!"}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Okay"}],"id":"op-8_jDPGjAEP"},{"text":""}],"id":"pr-FLCpmRApxo"}],"toPromptId":"pr-zkax6xivmadi","optionIds":["op-sr2yqorqolqs"]},{"type":"response","children":[{"type":"p","children":[{"text":"Right, it would halt."}]}],"toPromptId":"pr-zkax6xivmadi","optionIds":["op-e2tcpllufq9p"]},{"type":"p","children":[{"text":"Again, "},{"type":"inlinecode","children":[{"text":"haltsOnSelf"}]},{"text":" is wrong: it claimed that  "},{"type":"inlinecode","children":[{"text":"troll(trollStr)"}]},{"text":" would not halt, but upon inspection, it clearly "},{"text":"would","italic":true},{"text":" halt! Whatever "},{"type":"inlinecode","children":[{"text":"haltsOnSelf"}]},{"text":" claims "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" will do, "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" maliciously does the opposite!"}]},{"type":"p","children":[{"text":"So, our "},{"type":"inlinecode","children":[{"text":"haltsOnSelf"}]},{"text":" has a bug: it gives the wrong answer for the input "},{"type":"inlinecode","children":[{"text":"trollStr"}]},{"text":". But where is the bug, exactly? Turing’s says: the bug is in the "},{"type":"inlinecode","children":[{"text":"haltsOn"}]},{"text":" function that we assumed the existence of."}]},{"type":"p","children":[{"text":"Whatever version of "},{"type":"inlinecode","children":[{"text":"haltsOn"}]},{"text":" we’re given, we can show that it has a bug. That is, there is no function that correctly solves the halting problem!"}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Wait, what about "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":", not "},{"type":"inlinecode","children":[{"text":"haltsOn"}]},{"text":"?"}],"id":"op-CtZvQKPtkd"},{"text":""}],"id":"pr-nCMxrUNepY"},{"type":"h2","id":"equivalence-of-halts-and-halts-on","children":[{"text":"Equivalence of "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":" and "},{"type":"inlinecode","children":[{"text":"haltsOn"}]},{"text":""}]},{"type":"p","children":[{"text":"We originally asked for a function "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":", rather than "},{"type":"inlinecode","children":[{"text":"haltsOn"}]},{"text":". But it turns out that they’re equivalent. If we assume that we have a correct "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":", then we can write a correct "},{"type":"inlinecode","children":[{"text":"haltsOn"}]},{"text":" like so:"}]},{"type":"blockcode","html":"\u003cspan class=\"pl-k\"\u003efunction\u003c/span\u003e \u003cspan class=\"pl-en\"\u003ehaltsOn\u003c/span\u003e(\u003cspan class=\"pl-v\"\u003efuncStr\u003c/span\u003e, \u003cspan class=\"pl-v\"\u003eargStr\u003c/span\u003e) {\n  \u003cspan class=\"pl-k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"pl-en\"\u003ehalts\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e`\u003c/span\u003e\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    const f = ${\u003cspan class=\"pl-smi\"\u003efuncStr\u003c/span\u003e};\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    f(${\u003cspan class=\"pl-smi\"\u003eargStr\u003c/span\u003e});\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \u003cspan class=\"pl-pds\"\u003e`\u003c/span\u003e\u003c/span\u003e);\n}"},{"type":"p","children":[{"text":"This shows that "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":" is not possible either, because it would lead to a correct "},{"type":"inlinecode","children":[{"text":"haltsOn"}]},{"text":", which we just saw is not possible."}]},{"type":"p","children":[{"text":"But note that you could actually define them the other way around! Here’s an exercise: assuming you have "},{"type":"inlinecode","children":[{"text":"haltsOn"}]},{"text":", write an implementation of "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":"."}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Okay, I did it!"}],"id":"op-lsjd01xk1vwf"},{"text":""},{"type":"option","children":[{"text":"Nah, just show me."}],"id":"op-L1T8n1fnq2"},{"text":""}],"id":"pr-pbelcdi0c3sm"},{"type":"response","children":[{"type":"p","children":[{"text":"Great! Perhaps your implementation looked like this:"}]}],"toPromptId":"pr-pbelcdi0c3sm","optionIds":["op-lsjd01xk1vwf"]},{"type":"response","children":[{"type":"p","children":[{"text":"No worries. Here’s a possible implementation:"}]}],"toPromptId":"pr-pbelcdi0c3sm","optionIds":["op-L1T8n1fnq2"]},{"type":"blockcode","html":"\u003cspan class=\"pl-k\"\u003efunction\u003c/span\u003e \u003cspan class=\"pl-en\"\u003ehalts\u003c/span\u003e(\u003cspan class=\"pl-v\"\u003ecode\u003c/span\u003e\u003cspan class=\"pl-k\"\u003e:\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003estring\u003c/span\u003e) {\n  \u003cspan class=\"pl-k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"pl-en\"\u003ehaltsOn\u003c/span\u003e(\n    \u003cspan class=\"pl-c\"\u003e// Ignore argument, just run code\u003c/span\u003e\n    \u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e`\u003c/span\u003efunction(_) { ${\u003cspan class=\"pl-smi\"\u003ecode\u003c/span\u003e} }\u003cspan class=\"pl-pds\"\u003e`\u003c/span\u003e\u003c/span\u003e,\n    \u003cspan class=\"pl-c\"\u003e// Can be anything - it's ignored!\u003c/span\u003e\n    \u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e'\u003c/span\u003e0\u003cspan class=\"pl-pds\"\u003e'\u003c/span\u003e\u003c/span\u003e\n  );\n}"},{"type":"p","children":[{"text":"So, "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":" and "},{"type":"inlinecode","children":[{"text":"haltsOn"}]},{"text":" have equivalent power. For this reason, you’ll often see authors casually jump between one and the other."}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Continue"}],"id":"op-9XaxVRcl43"},{"text":""}],"id":"pr-rp9PwWaWsO"},{"type":"h2","id":"can-we-patch-the-bug","children":[{"text":"Can we patch the bug? 🐛"}]},{"type":"p","children":[{"text":"You might be wondering: can’t we just fix patch the bug in "},{"type":"inlinecode","children":[{"text":"haltsOn"}]},{"text":"? Let’s try defining a "},{"type":"inlinecode","children":[{"text":"haltsOn_v2"}]},{"text":" that just patches over this bug:"}]},{"type":"blockcode","html":"\u003cspan class=\"pl-k\"\u003efunction\u003c/span\u003e \u003cspan class=\"pl-en\"\u003ehaltsOn_v2\u003c/span\u003e(\u003cspan class=\"pl-v\"\u003efuncStr\u003c/span\u003e, \u003cspan class=\"pl-v\"\u003eargStr\u003c/span\u003e) {\n  \u003cspan class=\"pl-k\"\u003eif\u003c/span\u003e (\u003cspan class=\"pl-smi\"\u003efuncStr\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e===\u003c/span\u003e \u003cspan class=\"pl-smi\"\u003etrollStr\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e\u0026#x26;\u0026#x26;\u003c/span\u003e\n      \u003cspan class=\"pl-smi\"\u003eargStr\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e===\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003eJSON\u003c/span\u003e.\u003cspan class=\"pl-c1\"\u003estringify\u003c/span\u003e(\u003cspan class=\"pl-smi\"\u003etrollStr\u003c/span\u003e)) {\n    \u003cspan class=\"pl-c\"\u003e// Patch over the bug!\u003c/span\u003e\n    \u003cspan class=\"pl-k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e!\u003c/span\u003e\u003cspan class=\"pl-en\"\u003ehaltsOn\u003c/span\u003e(\u003cspan class=\"pl-smi\"\u003efuncStr\u003c/span\u003e, \u003cspan class=\"pl-smi\"\u003eargStr\u003c/span\u003e);\n  }\n\n  \u003cspan class=\"pl-c\"\u003e// Otherwise it's probably right?\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"pl-en\"\u003ehaltsOn\u003c/span\u003e(\u003cspan class=\"pl-smi\"\u003efuncStr\u003c/span\u003e, \u003cspan class=\"pl-smi\"\u003eargStr\u003c/span\u003e);\n}"},{"type":"p","children":[{"text":"Does "},{"type":"inlinecode","children":[{"text":"haltsOn_v2"}]},{"text":" have a bug?"}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Yes, "},{"type":"inlinecode","children":[{"text":"haltsOn_v2"}]},{"text":" can give wrong answers"}],"id":"op-vlFBF0A-aX","correct":true},{"text":""},{"type":"option","children":[{"text":"No, "},{"type":"inlinecode","children":[{"text":"haltsOn_v2"}]},{"text":" is bug free"}],"id":"op-8rXXVBM7ez","correct":false},{"text":""}],"id":"pr-90LNbAKSz0"},{"type":"response","children":[{"type":"p","children":[{"text":"Actually, "},{"type":"inlinecode","children":[{"text":"haltsOn_v2"}]},{"text":" has a bug too, and we can show it in exactly the same way we did for "},{"type":"inlinecode","children":[{"text":"haltsOn"}]},{"text":"! We define a new "},{"type":"inlinecode","children":[{"text":"troll_v2"}]},{"text":" that uses "},{"type":"inlinecode","children":[{"text":"haltsOn_v2"}]},{"text":", in exactly the same way we did for the original "},{"type":"inlinecode","children":[{"text":"haltsOn"}]},{"text":":"}]},{"type":"blockcode","html":"\u003cspan class=\"pl-k\"\u003efunction\u003c/span\u003e \u003cspan class=\"pl-en\"\u003etroll_v2\u003c/span\u003e(\u003cspan class=\"pl-v\"\u003efuncStr\u003c/span\u003e) {\n  \u003cspan class=\"pl-k\"\u003eif\u003c/span\u003e (\u003cspan class=\"pl-en\"\u003ehaltsOn_v2\u003c/span\u003e(\u003cspan class=\"pl-smi\"\u003efuncStr\u003c/span\u003e, \u003cspan class=\"pl-smi\"\u003efuncStr\u003c/span\u003e)) {\n    \u003cspan class=\"pl-k\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"pl-c1\"\u003etrue\u003c/span\u003e) { }  \u003cspan class=\"pl-c\"\u003e// loop forever\u003c/span\u003e\n  } \u003cspan class=\"pl-k\"\u003eelse\u003c/span\u003e {\n    \u003cspan class=\"pl-k\"\u003ereturn\u003c/span\u003e;  \u003cspan class=\"pl-c\"\u003e// halt\u003c/span\u003e\n  }\n}"},{"type":"p","children":[{"text":"Using the same reasoning as before, we can conclude that "},{"type":"inlinecode","children":[{"text":"haltsOn_v2"}]},{"text":" gives the wrong answer to the input "},{"type":"inlinecode","children":[{"text":"troll_v2Str"}]},{"text":"."}]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Okay"}],"id":"op-BgXTw4IQnk"},{"text":""}],"id":"pr-OUuPCGesb3"}],"toPromptId":"pr-90LNbAKSz0","optionIds":["op-8rXXVBM7ez"]},{"type":"response","children":[{"type":"p","children":[{"text":"Right! We can show "},{"type":"inlinecode","children":[{"text":"haltsOn_v2"}]},{"text":" has a bug in exactly the same way, by defining a new "},{"type":"inlinecode","children":[{"text":"troll_v2"}]},{"text":" that uses "},{"type":"inlinecode","children":[{"text":"haltsOn_v2"}]},{"text":"."}]}],"toPromptId":"pr-90LNbAKSz0","optionIds":["op-vlFBF0A-aX"]},{"type":"h2","id":"conclusion","children":[{"text":"Conclusion"}]},{"type":"p","children":[{"text":"The point is: whatever implementation of "},{"type":"inlinecode","children":[{"text":"halts"}]},{"text":" you provide, we can write a version of "},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" that proves it has a bug!"}]},{"type":"response","children":[{"type":"p","children":[{"text":"This is ‘the halting problem’. I bet you’re regretting taking that contract now! You’ll never be able to complete it. Fortunately, you "},{"text":"can","italic":true},{"text":" complete this chapter now."}]}],"toPromptId":"pr-h7e4aqmip86h","optionIds":["op-wuak8n5kuiqf"]},{"type":"response","children":[{"type":"p","children":[{"text":"This is ‘the halting problem’. Your instincts were good, and you were wise not to take that contract! You’d never have been able to complete it! Fortunately, you "},{"text":"can","italic":true},{"text":" complete this chapter now."}]}],"toPromptId":"pr-h7e4aqmip86h","optionIds":["op-bhcjh1wlraia"]},{"type":"prompt","children":[{"text":""},{"type":"option","children":[{"text":"Halt chapter ✋"}],"id":"op-bwo6518cjdh0","correct":false},{"text":""}],"id":"pr-si562wjwp7tq"},{"type":"p","children":[{"bold":true,"text":"End notes:"}]},{"type":"p","children":[{"text":"Turing’s ","italic":true},{"type":"inlinecode","children":[{"text":"troll"}]},{"text":" function is usually called ","italic":true},{"type":"inlinecode","children":[{"text":"g"}]},{"text":". Thanks to an anonymous reviewer for suggesting the name “troll”!","italic":true}]}]}},"__N_SSP":true},"page":"/_sites/[courseSlug]/[lessonSlug]","query":{"courseSlug":"busy-beavers","lessonSlug":"the-halting-problem"},"buildId":"WIBuqvvC0gPBScgpprxWY","isFallback":false,"gssp":true,"scriptLoader":[]}          if (window.navigator && window.navigator.serviceWorker) {            window.navigator.serviceWorker.register('/service-worker.js', { scope: '/' });          }          